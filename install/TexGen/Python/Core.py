# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Core
else:
    import _Core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_SwigPyIterator

    def value(self):
        return _Core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Core.SwigPyIterator_copy(self)

    def next(self):
        return _Core.SwigPyIterator_next(self)

    def __next__(self):
        return _Core.SwigPyIterator___next__(self)

    def previous(self):
        return _Core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Core:
_Core.SwigPyIterator_swigregister(SwigPyIterator)

class PLANE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Normal = property(_Core.PLANE_Normal_get, _Core.PLANE_Normal_set)
    d = property(_Core.PLANE_d_get, _Core.PLANE_d_set)

    def __init__(self, *args):
        _Core.PLANE_swiginit(self, _Core.new_PLANE(*args))
    __swig_destroy__ = _Core.delete_PLANE

# Register PLANE in _Core:
_Core.PLANE_swigregister(PLANE)

class CMeshDataBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NODE = _Core.CMeshDataBase_NODE
    ELEMENT = _Core.CMeshDataBase_ELEMENT
    __swig_destroy__ = _Core.delete_CMeshDataBase

    def InsertVTKData(self, Parent):
        return _Core.CMeshDataBase_InsertVTKData(self, Parent)
    m_Name = property(_Core.CMeshDataBase_m_Name_get, _Core.CMeshDataBase_m_Name_set)
    m_DataType = property(_Core.CMeshDataBase_m_DataType_get, _Core.CMeshDataBase_m_DataType_set)

# Register CMeshDataBase in _Core:
_Core.CMeshDataBase_swigregister(CMeshDataBase)

class TexGenSingleton(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetInstance():
        return _Core.TexGenSingleton_GetInstance()

    def __init__(self, *args):
        _Core.TexGenSingleton_swiginit(self, _Core.new_TexGenSingleton(*args))
    __swig_destroy__ = _Core.delete_TexGenSingleton

# Register TexGenSingleton in _Core:
_Core.TexGenSingleton_swigregister(TexGenSingleton)

def TexGenSingleton_GetInstance():
    return _Core.TexGenSingleton_GetInstance()

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.StringVector___nonzero__(self)

    def __bool__(self):
        return _Core.StringVector___bool__(self)

    def __len__(self):
        return _Core.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.StringVector___setitem__(self, *args)

    def pop(self):
        return _Core.StringVector_pop(self)

    def append(self, x):
        return _Core.StringVector_append(self, x)

    def empty(self):
        return _Core.StringVector_empty(self)

    def size(self):
        return _Core.StringVector_size(self)

    def swap(self, v):
        return _Core.StringVector_swap(self, v)

    def begin(self):
        return _Core.StringVector_begin(self)

    def end(self):
        return _Core.StringVector_end(self)

    def rbegin(self):
        return _Core.StringVector_rbegin(self)

    def rend(self):
        return _Core.StringVector_rend(self)

    def clear(self):
        return _Core.StringVector_clear(self)

    def get_allocator(self):
        return _Core.StringVector_get_allocator(self)

    def pop_back(self):
        return _Core.StringVector_pop_back(self)

    def erase(self, *args):
        return _Core.StringVector_erase(self, *args)

    def __init__(self, *args):
        _Core.StringVector_swiginit(self, _Core.new_StringVector(*args))

    def push_back(self, x):
        return _Core.StringVector_push_back(self, x)

    def front(self):
        return _Core.StringVector_front(self)

    def back(self):
        return _Core.StringVector_back(self)

    def assign(self, n, x):
        return _Core.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.StringVector_resize(self, *args)

    def insert(self, *args):
        return _Core.StringVector_insert(self, *args)

    def reserve(self, n):
        return _Core.StringVector_reserve(self, n)

    def capacity(self):
        return _Core.StringVector_capacity(self)
    __swig_destroy__ = _Core.delete_StringVector

# Register StringVector in _Core:
_Core.StringVector_swigregister(StringVector)

class PlaneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.PlaneVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.PlaneVector___nonzero__(self)

    def __bool__(self):
        return _Core.PlaneVector___bool__(self)

    def __len__(self):
        return _Core.PlaneVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.PlaneVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.PlaneVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.PlaneVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.PlaneVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.PlaneVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.PlaneVector___setitem__(self, *args)

    def pop(self):
        return _Core.PlaneVector_pop(self)

    def append(self, x):
        return _Core.PlaneVector_append(self, x)

    def empty(self):
        return _Core.PlaneVector_empty(self)

    def size(self):
        return _Core.PlaneVector_size(self)

    def swap(self, v):
        return _Core.PlaneVector_swap(self, v)

    def begin(self):
        return _Core.PlaneVector_begin(self)

    def end(self):
        return _Core.PlaneVector_end(self)

    def rbegin(self):
        return _Core.PlaneVector_rbegin(self)

    def rend(self):
        return _Core.PlaneVector_rend(self)

    def clear(self):
        return _Core.PlaneVector_clear(self)

    def get_allocator(self):
        return _Core.PlaneVector_get_allocator(self)

    def pop_back(self):
        return _Core.PlaneVector_pop_back(self)

    def erase(self, *args):
        return _Core.PlaneVector_erase(self, *args)

    def __init__(self, *args):
        _Core.PlaneVector_swiginit(self, _Core.new_PlaneVector(*args))

    def push_back(self, x):
        return _Core.PlaneVector_push_back(self, x)

    def front(self):
        return _Core.PlaneVector_front(self)

    def back(self):
        return _Core.PlaneVector_back(self)

    def assign(self, n, x):
        return _Core.PlaneVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.PlaneVector_resize(self, *args)

    def insert(self, *args):
        return _Core.PlaneVector_insert(self, *args)

    def reserve(self, n):
        return _Core.PlaneVector_reserve(self, n)

    def capacity(self):
        return _Core.PlaneVector_capacity(self)
    __swig_destroy__ = _Core.delete_PlaneVector

# Register PlaneVector in _Core:
_Core.PlaneVector_swigregister(PlaneVector)

class XYZPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.XYZPair_swiginit(self, _Core.new_XYZPair(*args))
    first = property(_Core.XYZPair_first_get, _Core.XYZPair_first_set)
    second = property(_Core.XYZPair_second_get, _Core.XYZPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Core.delete_XYZPair

# Register XYZPair in _Core:
_Core.XYZPair_swigregister(XYZPair)

class YarnList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.YarnList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.YarnList___nonzero__(self)

    def __bool__(self):
        return _Core.YarnList___bool__(self)

    def __len__(self):
        return _Core.YarnList___len__(self)

    def __getslice__(self, i, j):
        return _Core.YarnList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.YarnList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.YarnList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.YarnList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.YarnList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.YarnList___setitem__(self, *args)

    def pop(self):
        return _Core.YarnList_pop(self)

    def append(self, x):
        return _Core.YarnList_append(self, x)

    def empty(self):
        return _Core.YarnList_empty(self)

    def size(self):
        return _Core.YarnList_size(self)

    def swap(self, v):
        return _Core.YarnList_swap(self, v)

    def begin(self):
        return _Core.YarnList_begin(self)

    def end(self):
        return _Core.YarnList_end(self)

    def rbegin(self):
        return _Core.YarnList_rbegin(self)

    def rend(self):
        return _Core.YarnList_rend(self)

    def clear(self):
        return _Core.YarnList_clear(self)

    def get_allocator(self):
        return _Core.YarnList_get_allocator(self)

    def pop_back(self):
        return _Core.YarnList_pop_back(self)

    def erase(self, *args):
        return _Core.YarnList_erase(self, *args)

    def __init__(self, *args):
        _Core.YarnList_swiginit(self, _Core.new_YarnList(*args))

    def push_back(self, x):
        return _Core.YarnList_push_back(self, x)

    def front(self):
        return _Core.YarnList_front(self)

    def back(self):
        return _Core.YarnList_back(self)

    def assign(self, n, x):
        return _Core.YarnList_assign(self, n, x)

    def resize(self, *args):
        return _Core.YarnList_resize(self, *args)

    def insert(self, *args):
        return _Core.YarnList_insert(self, *args)

    def pop_front(self):
        return _Core.YarnList_pop_front(self)

    def push_front(self, x):
        return _Core.YarnList_push_front(self, x)

    def reverse(self):
        return _Core.YarnList_reverse(self)
    __swig_destroy__ = _Core.delete_YarnList

# Register YarnList in _Core:
_Core.YarnList_swigregister(YarnList)

class YarnVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.YarnVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.YarnVector___nonzero__(self)

    def __bool__(self):
        return _Core.YarnVector___bool__(self)

    def __len__(self):
        return _Core.YarnVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.YarnVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.YarnVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.YarnVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.YarnVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.YarnVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.YarnVector___setitem__(self, *args)

    def pop(self):
        return _Core.YarnVector_pop(self)

    def append(self, x):
        return _Core.YarnVector_append(self, x)

    def empty(self):
        return _Core.YarnVector_empty(self)

    def size(self):
        return _Core.YarnVector_size(self)

    def swap(self, v):
        return _Core.YarnVector_swap(self, v)

    def begin(self):
        return _Core.YarnVector_begin(self)

    def end(self):
        return _Core.YarnVector_end(self)

    def rbegin(self):
        return _Core.YarnVector_rbegin(self)

    def rend(self):
        return _Core.YarnVector_rend(self)

    def clear(self):
        return _Core.YarnVector_clear(self)

    def get_allocator(self):
        return _Core.YarnVector_get_allocator(self)

    def pop_back(self):
        return _Core.YarnVector_pop_back(self)

    def erase(self, *args):
        return _Core.YarnVector_erase(self, *args)

    def __init__(self, *args):
        _Core.YarnVector_swiginit(self, _Core.new_YarnVector(*args))

    def push_back(self, x):
        return _Core.YarnVector_push_back(self, x)

    def front(self):
        return _Core.YarnVector_front(self)

    def back(self):
        return _Core.YarnVector_back(self)

    def assign(self, n, x):
        return _Core.YarnVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.YarnVector_resize(self, *args)

    def insert(self, *args):
        return _Core.YarnVector_insert(self, *args)

    def reserve(self, n):
        return _Core.YarnVector_reserve(self, n)

    def capacity(self):
        return _Core.YarnVector_capacity(self)
    __swig_destroy__ = _Core.delete_YarnVector

# Register YarnVector in _Core:
_Core.YarnVector_swigregister(YarnVector)

class YarnVectorPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.YarnVectorPtr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.YarnVectorPtr___nonzero__(self)

    def __bool__(self):
        return _Core.YarnVectorPtr___bool__(self)

    def __len__(self):
        return _Core.YarnVectorPtr___len__(self)

    def __getslice__(self, i, j):
        return _Core.YarnVectorPtr___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.YarnVectorPtr___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.YarnVectorPtr___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.YarnVectorPtr___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.YarnVectorPtr___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.YarnVectorPtr___setitem__(self, *args)

    def pop(self):
        return _Core.YarnVectorPtr_pop(self)

    def append(self, x):
        return _Core.YarnVectorPtr_append(self, x)

    def empty(self):
        return _Core.YarnVectorPtr_empty(self)

    def size(self):
        return _Core.YarnVectorPtr_size(self)

    def swap(self, v):
        return _Core.YarnVectorPtr_swap(self, v)

    def begin(self):
        return _Core.YarnVectorPtr_begin(self)

    def end(self):
        return _Core.YarnVectorPtr_end(self)

    def rbegin(self):
        return _Core.YarnVectorPtr_rbegin(self)

    def rend(self):
        return _Core.YarnVectorPtr_rend(self)

    def clear(self):
        return _Core.YarnVectorPtr_clear(self)

    def get_allocator(self):
        return _Core.YarnVectorPtr_get_allocator(self)

    def pop_back(self):
        return _Core.YarnVectorPtr_pop_back(self)

    def erase(self, *args):
        return _Core.YarnVectorPtr_erase(self, *args)

    def __init__(self, *args):
        _Core.YarnVectorPtr_swiginit(self, _Core.new_YarnVectorPtr(*args))

    def push_back(self, x):
        return _Core.YarnVectorPtr_push_back(self, x)

    def front(self):
        return _Core.YarnVectorPtr_front(self)

    def back(self):
        return _Core.YarnVectorPtr_back(self)

    def assign(self, n, x):
        return _Core.YarnVectorPtr_assign(self, n, x)

    def resize(self, *args):
        return _Core.YarnVectorPtr_resize(self, *args)

    def insert(self, *args):
        return _Core.YarnVectorPtr_insert(self, *args)

    def reserve(self, n):
        return _Core.YarnVectorPtr_reserve(self, n)

    def capacity(self):
        return _Core.YarnVectorPtr_capacity(self)
    __swig_destroy__ = _Core.delete_YarnVectorPtr

# Register YarnVectorPtr in _Core:
_Core.YarnVectorPtr_swigregister(YarnVectorPtr)

class TextileVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.TextileVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.TextileVector___nonzero__(self)

    def __bool__(self):
        return _Core.TextileVector___bool__(self)

    def __len__(self):
        return _Core.TextileVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.TextileVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.TextileVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.TextileVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.TextileVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.TextileVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.TextileVector___setitem__(self, *args)

    def pop(self):
        return _Core.TextileVector_pop(self)

    def append(self, x):
        return _Core.TextileVector_append(self, x)

    def empty(self):
        return _Core.TextileVector_empty(self)

    def size(self):
        return _Core.TextileVector_size(self)

    def swap(self, v):
        return _Core.TextileVector_swap(self, v)

    def begin(self):
        return _Core.TextileVector_begin(self)

    def end(self):
        return _Core.TextileVector_end(self)

    def rbegin(self):
        return _Core.TextileVector_rbegin(self)

    def rend(self):
        return _Core.TextileVector_rend(self)

    def clear(self):
        return _Core.TextileVector_clear(self)

    def get_allocator(self):
        return _Core.TextileVector_get_allocator(self)

    def pop_back(self):
        return _Core.TextileVector_pop_back(self)

    def erase(self, *args):
        return _Core.TextileVector_erase(self, *args)

    def __init__(self, *args):
        _Core.TextileVector_swiginit(self, _Core.new_TextileVector(*args))

    def push_back(self, x):
        return _Core.TextileVector_push_back(self, x)

    def front(self):
        return _Core.TextileVector_front(self)

    def back(self):
        return _Core.TextileVector_back(self)

    def assign(self, n, x):
        return _Core.TextileVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.TextileVector_resize(self, *args)

    def insert(self, *args):
        return _Core.TextileVector_insert(self, *args)

    def reserve(self, n):
        return _Core.TextileVector_reserve(self, n)

    def capacity(self):
        return _Core.TextileVector_capacity(self)
    __swig_destroy__ = _Core.delete_TextileVector

# Register TextileVector in _Core:
_Core.TextileVector_swigregister(TextileVector)

class TextileMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.TextileMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.TextileMap___nonzero__(self)

    def __bool__(self):
        return _Core.TextileMap___bool__(self)

    def __len__(self):
        return _Core.TextileMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Core.TextileMap___getitem__(self, key)

    def __delitem__(self, key):
        return _Core.TextileMap___delitem__(self, key)

    def has_key(self, key):
        return _Core.TextileMap_has_key(self, key)

    def keys(self):
        return _Core.TextileMap_keys(self)

    def values(self):
        return _Core.TextileMap_values(self)

    def items(self):
        return _Core.TextileMap_items(self)

    def __contains__(self, key):
        return _Core.TextileMap___contains__(self, key)

    def key_iterator(self):
        return _Core.TextileMap_key_iterator(self)

    def value_iterator(self):
        return _Core.TextileMap_value_iterator(self)

    def __setitem__(self, *args):
        return _Core.TextileMap___setitem__(self, *args)

    def asdict(self):
        return _Core.TextileMap_asdict(self)

    def __init__(self, *args):
        _Core.TextileMap_swiginit(self, _Core.new_TextileMap(*args))

    def empty(self):
        return _Core.TextileMap_empty(self)

    def size(self):
        return _Core.TextileMap_size(self)

    def swap(self, v):
        return _Core.TextileMap_swap(self, v)

    def begin(self):
        return _Core.TextileMap_begin(self)

    def end(self):
        return _Core.TextileMap_end(self)

    def rbegin(self):
        return _Core.TextileMap_rbegin(self)

    def rend(self):
        return _Core.TextileMap_rend(self)

    def clear(self):
        return _Core.TextileMap_clear(self)

    def get_allocator(self):
        return _Core.TextileMap_get_allocator(self)

    def count(self, x):
        return _Core.TextileMap_count(self, x)

    def erase(self, *args):
        return _Core.TextileMap_erase(self, *args)

    def find(self, x):
        return _Core.TextileMap_find(self, x)

    def lower_bound(self, x):
        return _Core.TextileMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _Core.TextileMap_upper_bound(self, x)
    __swig_destroy__ = _Core.delete_TextileMap

# Register TextileMap in _Core:
_Core.TextileMap_swigregister(TextileMap)

class NodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.NodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.NodeVector___nonzero__(self)

    def __bool__(self):
        return _Core.NodeVector___bool__(self)

    def __len__(self):
        return _Core.NodeVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.NodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.NodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.NodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.NodeVector___setitem__(self, *args)

    def pop(self):
        return _Core.NodeVector_pop(self)

    def append(self, x):
        return _Core.NodeVector_append(self, x)

    def empty(self):
        return _Core.NodeVector_empty(self)

    def size(self):
        return _Core.NodeVector_size(self)

    def swap(self, v):
        return _Core.NodeVector_swap(self, v)

    def begin(self):
        return _Core.NodeVector_begin(self)

    def end(self):
        return _Core.NodeVector_end(self)

    def rbegin(self):
        return _Core.NodeVector_rbegin(self)

    def rend(self):
        return _Core.NodeVector_rend(self)

    def clear(self):
        return _Core.NodeVector_clear(self)

    def get_allocator(self):
        return _Core.NodeVector_get_allocator(self)

    def pop_back(self):
        return _Core.NodeVector_pop_back(self)

    def erase(self, *args):
        return _Core.NodeVector_erase(self, *args)

    def __init__(self, *args):
        _Core.NodeVector_swiginit(self, _Core.new_NodeVector(*args))

    def push_back(self, x):
        return _Core.NodeVector_push_back(self, x)

    def front(self):
        return _Core.NodeVector_front(self)

    def back(self):
        return _Core.NodeVector_back(self)

    def assign(self, n, x):
        return _Core.NodeVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.NodeVector_resize(self, *args)

    def insert(self, *args):
        return _Core.NodeVector_insert(self, *args)

    def reserve(self, n):
        return _Core.NodeVector_reserve(self, n)

    def capacity(self):
        return _Core.NodeVector_capacity(self)
    __swig_destroy__ = _Core.delete_NodeVector

# Register NodeVector in _Core:
_Core.NodeVector_swigregister(NodeVector)

class SlaveNodeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.SlaveNodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.SlaveNodeVector___nonzero__(self)

    def __bool__(self):
        return _Core.SlaveNodeVector___bool__(self)

    def __len__(self):
        return _Core.SlaveNodeVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.SlaveNodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.SlaveNodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.SlaveNodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.SlaveNodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.SlaveNodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.SlaveNodeVector___setitem__(self, *args)

    def pop(self):
        return _Core.SlaveNodeVector_pop(self)

    def append(self, x):
        return _Core.SlaveNodeVector_append(self, x)

    def empty(self):
        return _Core.SlaveNodeVector_empty(self)

    def size(self):
        return _Core.SlaveNodeVector_size(self)

    def swap(self, v):
        return _Core.SlaveNodeVector_swap(self, v)

    def begin(self):
        return _Core.SlaveNodeVector_begin(self)

    def end(self):
        return _Core.SlaveNodeVector_end(self)

    def rbegin(self):
        return _Core.SlaveNodeVector_rbegin(self)

    def rend(self):
        return _Core.SlaveNodeVector_rend(self)

    def clear(self):
        return _Core.SlaveNodeVector_clear(self)

    def get_allocator(self):
        return _Core.SlaveNodeVector_get_allocator(self)

    def pop_back(self):
        return _Core.SlaveNodeVector_pop_back(self)

    def erase(self, *args):
        return _Core.SlaveNodeVector_erase(self, *args)

    def __init__(self, *args):
        _Core.SlaveNodeVector_swiginit(self, _Core.new_SlaveNodeVector(*args))

    def push_back(self, x):
        return _Core.SlaveNodeVector_push_back(self, x)

    def front(self):
        return _Core.SlaveNodeVector_front(self)

    def back(self):
        return _Core.SlaveNodeVector_back(self)

    def assign(self, n, x):
        return _Core.SlaveNodeVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.SlaveNodeVector_resize(self, *args)

    def insert(self, *args):
        return _Core.SlaveNodeVector_insert(self, *args)

    def reserve(self, n):
        return _Core.SlaveNodeVector_reserve(self, n)

    def capacity(self):
        return _Core.SlaveNodeVector_capacity(self)
    __swig_destroy__ = _Core.delete_SlaveNodeVector

# Register SlaveNodeVector in _Core:
_Core.SlaveNodeVector_swigregister(SlaveNodeVector)

class XYZVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.XYZVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.XYZVector___nonzero__(self)

    def __bool__(self):
        return _Core.XYZVector___bool__(self)

    def __len__(self):
        return _Core.XYZVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.XYZVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.XYZVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.XYZVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.XYZVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.XYZVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.XYZVector___setitem__(self, *args)

    def pop(self):
        return _Core.XYZVector_pop(self)

    def append(self, x):
        return _Core.XYZVector_append(self, x)

    def empty(self):
        return _Core.XYZVector_empty(self)

    def size(self):
        return _Core.XYZVector_size(self)

    def swap(self, v):
        return _Core.XYZVector_swap(self, v)

    def begin(self):
        return _Core.XYZVector_begin(self)

    def end(self):
        return _Core.XYZVector_end(self)

    def rbegin(self):
        return _Core.XYZVector_rbegin(self)

    def rend(self):
        return _Core.XYZVector_rend(self)

    def clear(self):
        return _Core.XYZVector_clear(self)

    def get_allocator(self):
        return _Core.XYZVector_get_allocator(self)

    def pop_back(self):
        return _Core.XYZVector_pop_back(self)

    def erase(self, *args):
        return _Core.XYZVector_erase(self, *args)

    def __init__(self, *args):
        _Core.XYZVector_swiginit(self, _Core.new_XYZVector(*args))

    def push_back(self, x):
        return _Core.XYZVector_push_back(self, x)

    def front(self):
        return _Core.XYZVector_front(self)

    def back(self):
        return _Core.XYZVector_back(self)

    def assign(self, n, x):
        return _Core.XYZVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.XYZVector_resize(self, *args)

    def insert(self, *args):
        return _Core.XYZVector_insert(self, *args)

    def reserve(self, n):
        return _Core.XYZVector_reserve(self, n)

    def capacity(self):
        return _Core.XYZVector_capacity(self)
    __swig_destroy__ = _Core.delete_XYZVector

# Register XYZVector in _Core:
_Core.XYZVector_swigregister(XYZVector)

class XYVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.XYVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.XYVector___nonzero__(self)

    def __bool__(self):
        return _Core.XYVector___bool__(self)

    def __len__(self):
        return _Core.XYVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.XYVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.XYVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.XYVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.XYVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.XYVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.XYVector___setitem__(self, *args)

    def pop(self):
        return _Core.XYVector_pop(self)

    def append(self, x):
        return _Core.XYVector_append(self, x)

    def empty(self):
        return _Core.XYVector_empty(self)

    def size(self):
        return _Core.XYVector_size(self)

    def swap(self, v):
        return _Core.XYVector_swap(self, v)

    def begin(self):
        return _Core.XYVector_begin(self)

    def end(self):
        return _Core.XYVector_end(self)

    def rbegin(self):
        return _Core.XYVector_rbegin(self)

    def rend(self):
        return _Core.XYVector_rend(self)

    def clear(self):
        return _Core.XYVector_clear(self)

    def get_allocator(self):
        return _Core.XYVector_get_allocator(self)

    def pop_back(self):
        return _Core.XYVector_pop_back(self)

    def erase(self, *args):
        return _Core.XYVector_erase(self, *args)

    def __init__(self, *args):
        _Core.XYVector_swiginit(self, _Core.new_XYVector(*args))

    def push_back(self, x):
        return _Core.XYVector_push_back(self, x)

    def front(self):
        return _Core.XYVector_front(self)

    def back(self):
        return _Core.XYVector_back(self)

    def assign(self, n, x):
        return _Core.XYVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.XYVector_resize(self, *args)

    def insert(self, *args):
        return _Core.XYVector_insert(self, *args)

    def reserve(self, n):
        return _Core.XYVector_reserve(self, n)

    def capacity(self):
        return _Core.XYVector_capacity(self)
    __swig_destroy__ = _Core.delete_XYVector

# Register XYVector in _Core:
_Core.XYVector_swigregister(XYVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _Core.DoubleVector___bool__(self)

    def __len__(self):
        return _Core.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _Core.DoubleVector_pop(self)

    def append(self, x):
        return _Core.DoubleVector_append(self, x)

    def empty(self):
        return _Core.DoubleVector_empty(self)

    def size(self):
        return _Core.DoubleVector_size(self)

    def swap(self, v):
        return _Core.DoubleVector_swap(self, v)

    def begin(self):
        return _Core.DoubleVector_begin(self)

    def end(self):
        return _Core.DoubleVector_end(self)

    def rbegin(self):
        return _Core.DoubleVector_rbegin(self)

    def rend(self):
        return _Core.DoubleVector_rend(self)

    def clear(self):
        return _Core.DoubleVector_clear(self)

    def get_allocator(self):
        return _Core.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _Core.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _Core.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _Core.DoubleVector_swiginit(self, _Core.new_DoubleVector(*args))

    def push_back(self, x):
        return _Core.DoubleVector_push_back(self, x)

    def front(self):
        return _Core.DoubleVector_front(self)

    def back(self):
        return _Core.DoubleVector_back(self)

    def assign(self, n, x):
        return _Core.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _Core.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _Core.DoubleVector_reserve(self, n)

    def capacity(self):
        return _Core.DoubleVector_capacity(self)
    __swig_destroy__ = _Core.delete_DoubleVector

# Register DoubleVector in _Core:
_Core.DoubleVector_swigregister(DoubleVector)

class IntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.IntPair_swiginit(self, _Core.new_IntPair(*args))
    first = property(_Core.IntPair_first_get, _Core.IntPair_first_set)
    second = property(_Core.IntPair_second_get, _Core.IntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Core.delete_IntPair

# Register IntPair in _Core:
_Core.IntPair_swigregister(IntPair)

class IntPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.IntPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.IntPairVector___nonzero__(self)

    def __bool__(self):
        return _Core.IntPairVector___bool__(self)

    def __len__(self):
        return _Core.IntPairVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.IntPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.IntPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.IntPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.IntPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.IntPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.IntPairVector___setitem__(self, *args)

    def pop(self):
        return _Core.IntPairVector_pop(self)

    def append(self, x):
        return _Core.IntPairVector_append(self, x)

    def empty(self):
        return _Core.IntPairVector_empty(self)

    def size(self):
        return _Core.IntPairVector_size(self)

    def swap(self, v):
        return _Core.IntPairVector_swap(self, v)

    def begin(self):
        return _Core.IntPairVector_begin(self)

    def end(self):
        return _Core.IntPairVector_end(self)

    def rbegin(self):
        return _Core.IntPairVector_rbegin(self)

    def rend(self):
        return _Core.IntPairVector_rend(self)

    def clear(self):
        return _Core.IntPairVector_clear(self)

    def get_allocator(self):
        return _Core.IntPairVector_get_allocator(self)

    def pop_back(self):
        return _Core.IntPairVector_pop_back(self)

    def erase(self, *args):
        return _Core.IntPairVector_erase(self, *args)

    def __init__(self, *args):
        _Core.IntPairVector_swiginit(self, _Core.new_IntPairVector(*args))

    def push_back(self, x):
        return _Core.IntPairVector_push_back(self, x)

    def front(self):
        return _Core.IntPairVector_front(self)

    def back(self):
        return _Core.IntPairVector_back(self)

    def assign(self, n, x):
        return _Core.IntPairVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.IntPairVector_resize(self, *args)

    def insert(self, *args):
        return _Core.IntPairVector_insert(self, *args)

    def reserve(self, n):
        return _Core.IntPairVector_reserve(self, n)

    def capacity(self):
        return _Core.IntPairVector_capacity(self)
    __swig_destroy__ = _Core.delete_IntPairVector

# Register IntPairVector in _Core:
_Core.IntPairVector_swigregister(IntPairVector)

class PointInfoVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.PointInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.PointInfoVector___nonzero__(self)

    def __bool__(self):
        return _Core.PointInfoVector___bool__(self)

    def __len__(self):
        return _Core.PointInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.PointInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.PointInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.PointInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.PointInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.PointInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.PointInfoVector___setitem__(self, *args)

    def pop(self):
        return _Core.PointInfoVector_pop(self)

    def append(self, x):
        return _Core.PointInfoVector_append(self, x)

    def empty(self):
        return _Core.PointInfoVector_empty(self)

    def size(self):
        return _Core.PointInfoVector_size(self)

    def swap(self, v):
        return _Core.PointInfoVector_swap(self, v)

    def begin(self):
        return _Core.PointInfoVector_begin(self)

    def end(self):
        return _Core.PointInfoVector_end(self)

    def rbegin(self):
        return _Core.PointInfoVector_rbegin(self)

    def rend(self):
        return _Core.PointInfoVector_rend(self)

    def clear(self):
        return _Core.PointInfoVector_clear(self)

    def get_allocator(self):
        return _Core.PointInfoVector_get_allocator(self)

    def pop_back(self):
        return _Core.PointInfoVector_pop_back(self)

    def erase(self, *args):
        return _Core.PointInfoVector_erase(self, *args)

    def __init__(self, *args):
        _Core.PointInfoVector_swiginit(self, _Core.new_PointInfoVector(*args))

    def push_back(self, x):
        return _Core.PointInfoVector_push_back(self, x)

    def front(self):
        return _Core.PointInfoVector_front(self)

    def back(self):
        return _Core.PointInfoVector_back(self)

    def assign(self, n, x):
        return _Core.PointInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.PointInfoVector_resize(self, *args)

    def insert(self, *args):
        return _Core.PointInfoVector_insert(self, *args)

    def reserve(self, n):
        return _Core.PointInfoVector_reserve(self, n)

    def capacity(self):
        return _Core.PointInfoVector_capacity(self)
    __swig_destroy__ = _Core.delete_PointInfoVector

# Register PointInfoVector in _Core:
_Core.PointInfoVector_swigregister(PointInfoVector)

class DoubleXYZPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.DoubleXYZPair_swiginit(self, _Core.new_DoubleXYZPair(*args))
    first = property(_Core.DoubleXYZPair_first_get, _Core.DoubleXYZPair_first_set)
    second = property(_Core.DoubleXYZPair_second_get, _Core.DoubleXYZPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Core.delete_DoubleXYZPair

# Register DoubleXYZPair in _Core:
_Core.DoubleXYZPair_swigregister(DoubleXYZPair)

class DoubleXYZPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.DoubleXYZPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.DoubleXYZPairVector___nonzero__(self)

    def __bool__(self):
        return _Core.DoubleXYZPairVector___bool__(self)

    def __len__(self):
        return _Core.DoubleXYZPairVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.DoubleXYZPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.DoubleXYZPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.DoubleXYZPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.DoubleXYZPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.DoubleXYZPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.DoubleXYZPairVector___setitem__(self, *args)

    def pop(self):
        return _Core.DoubleXYZPairVector_pop(self)

    def append(self, x):
        return _Core.DoubleXYZPairVector_append(self, x)

    def empty(self):
        return _Core.DoubleXYZPairVector_empty(self)

    def size(self):
        return _Core.DoubleXYZPairVector_size(self)

    def swap(self, v):
        return _Core.DoubleXYZPairVector_swap(self, v)

    def begin(self):
        return _Core.DoubleXYZPairVector_begin(self)

    def end(self):
        return _Core.DoubleXYZPairVector_end(self)

    def rbegin(self):
        return _Core.DoubleXYZPairVector_rbegin(self)

    def rend(self):
        return _Core.DoubleXYZPairVector_rend(self)

    def clear(self):
        return _Core.DoubleXYZPairVector_clear(self)

    def get_allocator(self):
        return _Core.DoubleXYZPairVector_get_allocator(self)

    def pop_back(self):
        return _Core.DoubleXYZPairVector_pop_back(self)

    def erase(self, *args):
        return _Core.DoubleXYZPairVector_erase(self, *args)

    def __init__(self, *args):
        _Core.DoubleXYZPairVector_swiginit(self, _Core.new_DoubleXYZPairVector(*args))

    def push_back(self, x):
        return _Core.DoubleXYZPairVector_push_back(self, x)

    def front(self):
        return _Core.DoubleXYZPairVector_front(self)

    def back(self):
        return _Core.DoubleXYZPairVector_back(self)

    def assign(self, n, x):
        return _Core.DoubleXYZPairVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.DoubleXYZPairVector_resize(self, *args)

    def insert(self, *args):
        return _Core.DoubleXYZPairVector_insert(self, *args)

    def reserve(self, n):
        return _Core.DoubleXYZPairVector_reserve(self, n)

    def capacity(self):
        return _Core.DoubleXYZPairVector_capacity(self)
    __swig_destroy__ = _Core.delete_DoubleXYZPairVector

# Register DoubleXYZPairVector in _Core:
_Core.DoubleXYZPairVector_swigregister(DoubleXYZPairVector)

class BoolPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.BoolPair_swiginit(self, _Core.new_BoolPair(*args))
    first = property(_Core.BoolPair_first_get, _Core.BoolPair_first_set)
    second = property(_Core.BoolPair_second_get, _Core.BoolPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Core.delete_BoolPair

# Register BoolPair in _Core:
_Core.BoolPair_swigregister(BoolPair)

class IntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.IntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.IntList___nonzero__(self)

    def __bool__(self):
        return _Core.IntList___bool__(self)

    def __len__(self):
        return _Core.IntList___len__(self)

    def __getslice__(self, i, j):
        return _Core.IntList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.IntList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.IntList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.IntList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.IntList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.IntList___setitem__(self, *args)

    def pop(self):
        return _Core.IntList_pop(self)

    def append(self, x):
        return _Core.IntList_append(self, x)

    def empty(self):
        return _Core.IntList_empty(self)

    def size(self):
        return _Core.IntList_size(self)

    def swap(self, v):
        return _Core.IntList_swap(self, v)

    def begin(self):
        return _Core.IntList_begin(self)

    def end(self):
        return _Core.IntList_end(self)

    def rbegin(self):
        return _Core.IntList_rbegin(self)

    def rend(self):
        return _Core.IntList_rend(self)

    def clear(self):
        return _Core.IntList_clear(self)

    def get_allocator(self):
        return _Core.IntList_get_allocator(self)

    def pop_back(self):
        return _Core.IntList_pop_back(self)

    def erase(self, *args):
        return _Core.IntList_erase(self, *args)

    def __init__(self, *args):
        _Core.IntList_swiginit(self, _Core.new_IntList(*args))

    def push_back(self, x):
        return _Core.IntList_push_back(self, x)

    def front(self):
        return _Core.IntList_front(self)

    def back(self):
        return _Core.IntList_back(self)

    def assign(self, n, x):
        return _Core.IntList_assign(self, n, x)

    def resize(self, *args):
        return _Core.IntList_resize(self, *args)

    def insert(self, *args):
        return _Core.IntList_insert(self, *args)

    def pop_front(self):
        return _Core.IntList_pop_front(self)

    def push_front(self, x):
        return _Core.IntList_push_front(self, x)

    def reverse(self):
        return _Core.IntList_reverse(self)
    __swig_destroy__ = _Core.delete_IntList

# Register IntList in _Core:
_Core.IntList_swigregister(IntList)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.IntVector___nonzero__(self)

    def __bool__(self):
        return _Core.IntVector___bool__(self)

    def __len__(self):
        return _Core.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.IntVector___setitem__(self, *args)

    def pop(self):
        return _Core.IntVector_pop(self)

    def append(self, x):
        return _Core.IntVector_append(self, x)

    def empty(self):
        return _Core.IntVector_empty(self)

    def size(self):
        return _Core.IntVector_size(self)

    def swap(self, v):
        return _Core.IntVector_swap(self, v)

    def begin(self):
        return _Core.IntVector_begin(self)

    def end(self):
        return _Core.IntVector_end(self)

    def rbegin(self):
        return _Core.IntVector_rbegin(self)

    def rend(self):
        return _Core.IntVector_rend(self)

    def clear(self):
        return _Core.IntVector_clear(self)

    def get_allocator(self):
        return _Core.IntVector_get_allocator(self)

    def pop_back(self):
        return _Core.IntVector_pop_back(self)

    def erase(self, *args):
        return _Core.IntVector_erase(self, *args)

    def __init__(self, *args):
        _Core.IntVector_swiginit(self, _Core.new_IntVector(*args))

    def push_back(self, x):
        return _Core.IntVector_push_back(self, x)

    def front(self):
        return _Core.IntVector_front(self)

    def back(self):
        return _Core.IntVector_back(self)

    def assign(self, n, x):
        return _Core.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.IntVector_resize(self, *args)

    def insert(self, *args):
        return _Core.IntVector_insert(self, *args)

    def reserve(self, n):
        return _Core.IntVector_reserve(self, n)

    def capacity(self):
        return _Core.IntVector_capacity(self)
    __swig_destroy__ = _Core.delete_IntVector

# Register IntVector in _Core:
_Core.IntVector_swigregister(IntVector)

class BoolVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.BoolVector___nonzero__(self)

    def __bool__(self):
        return _Core.BoolVector___bool__(self)

    def __len__(self):
        return _Core.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.BoolVector___setitem__(self, *args)

    def pop(self):
        return _Core.BoolVector_pop(self)

    def append(self, x):
        return _Core.BoolVector_append(self, x)

    def empty(self):
        return _Core.BoolVector_empty(self)

    def size(self):
        return _Core.BoolVector_size(self)

    def swap(self, v):
        return _Core.BoolVector_swap(self, v)

    def begin(self):
        return _Core.BoolVector_begin(self)

    def end(self):
        return _Core.BoolVector_end(self)

    def rbegin(self):
        return _Core.BoolVector_rbegin(self)

    def rend(self):
        return _Core.BoolVector_rend(self)

    def clear(self):
        return _Core.BoolVector_clear(self)

    def get_allocator(self):
        return _Core.BoolVector_get_allocator(self)

    def pop_back(self):
        return _Core.BoolVector_pop_back(self)

    def erase(self, *args):
        return _Core.BoolVector_erase(self, *args)

    def __init__(self, *args):
        _Core.BoolVector_swiginit(self, _Core.new_BoolVector(*args))

    def push_back(self, x):
        return _Core.BoolVector_push_back(self, x)

    def front(self):
        return _Core.BoolVector_front(self)

    def back(self):
        return _Core.BoolVector_back(self)

    def assign(self, n, x):
        return _Core.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _Core.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _Core.BoolVector_reserve(self, n)

    def capacity(self):
        return _Core.BoolVector_capacity(self)
    __swig_destroy__ = _Core.delete_BoolVector

# Register BoolVector in _Core:
_Core.BoolVector_swigregister(BoolVector)

class ElementDataList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.ElementDataList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.ElementDataList___nonzero__(self)

    def __bool__(self):
        return _Core.ElementDataList___bool__(self)

    def __len__(self):
        return _Core.ElementDataList___len__(self)

    def __getslice__(self, i, j):
        return _Core.ElementDataList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.ElementDataList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.ElementDataList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.ElementDataList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.ElementDataList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.ElementDataList___setitem__(self, *args)

    def pop(self):
        return _Core.ElementDataList_pop(self)

    def append(self, x):
        return _Core.ElementDataList_append(self, x)

    def empty(self):
        return _Core.ElementDataList_empty(self)

    def size(self):
        return _Core.ElementDataList_size(self)

    def swap(self, v):
        return _Core.ElementDataList_swap(self, v)

    def begin(self):
        return _Core.ElementDataList_begin(self)

    def end(self):
        return _Core.ElementDataList_end(self)

    def rbegin(self):
        return _Core.ElementDataList_rbegin(self)

    def rend(self):
        return _Core.ElementDataList_rend(self)

    def clear(self):
        return _Core.ElementDataList_clear(self)

    def get_allocator(self):
        return _Core.ElementDataList_get_allocator(self)

    def pop_back(self):
        return _Core.ElementDataList_pop_back(self)

    def erase(self, *args):
        return _Core.ElementDataList_erase(self, *args)

    def __init__(self, *args):
        _Core.ElementDataList_swiginit(self, _Core.new_ElementDataList(*args))

    def push_back(self, x):
        return _Core.ElementDataList_push_back(self, x)

    def front(self):
        return _Core.ElementDataList_front(self)

    def back(self):
        return _Core.ElementDataList_back(self)

    def assign(self, n, x):
        return _Core.ElementDataList_assign(self, n, x)

    def resize(self, *args):
        return _Core.ElementDataList_resize(self, *args)

    def insert(self, *args):
        return _Core.ElementDataList_insert(self, *args)

    def pop_front(self):
        return _Core.ElementDataList_pop_front(self)

    def push_front(self, x):
        return _Core.ElementDataList_push_front(self, x)

    def reverse(self):
        return _Core.ElementDataList_reverse(self)
    __swig_destroy__ = _Core.delete_ElementDataList

# Register ElementDataList in _Core:
_Core.ElementDataList_swigregister(ElementDataList)

class MeshDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.MeshDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.MeshDataVector___nonzero__(self)

    def __bool__(self):
        return _Core.MeshDataVector___bool__(self)

    def __len__(self):
        return _Core.MeshDataVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.MeshDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.MeshDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.MeshDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.MeshDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.MeshDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.MeshDataVector___setitem__(self, *args)

    def pop(self):
        return _Core.MeshDataVector_pop(self)

    def append(self, x):
        return _Core.MeshDataVector_append(self, x)

    def empty(self):
        return _Core.MeshDataVector_empty(self)

    def size(self):
        return _Core.MeshDataVector_size(self)

    def swap(self, v):
        return _Core.MeshDataVector_swap(self, v)

    def begin(self):
        return _Core.MeshDataVector_begin(self)

    def end(self):
        return _Core.MeshDataVector_end(self)

    def rbegin(self):
        return _Core.MeshDataVector_rbegin(self)

    def rend(self):
        return _Core.MeshDataVector_rend(self)

    def clear(self):
        return _Core.MeshDataVector_clear(self)

    def get_allocator(self):
        return _Core.MeshDataVector_get_allocator(self)

    def pop_back(self):
        return _Core.MeshDataVector_pop_back(self)

    def erase(self, *args):
        return _Core.MeshDataVector_erase(self, *args)

    def __init__(self, *args):
        _Core.MeshDataVector_swiginit(self, _Core.new_MeshDataVector(*args))

    def push_back(self, x):
        return _Core.MeshDataVector_push_back(self, x)

    def front(self):
        return _Core.MeshDataVector_front(self)

    def back(self):
        return _Core.MeshDataVector_back(self)

    def assign(self, n, x):
        return _Core.MeshDataVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.MeshDataVector_resize(self, *args)

    def insert(self, *args):
        return _Core.MeshDataVector_insert(self, *args)

    def reserve(self, n):
        return _Core.MeshDataVector_reserve(self, n)

    def capacity(self):
        return _Core.MeshDataVector_capacity(self)
    __swig_destroy__ = _Core.delete_MeshDataVector

# Register MeshDataVector in _Core:
_Core.MeshDataVector_swigregister(MeshDataVector)

class LinearTransformationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.LinearTransformationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.LinearTransformationVector___nonzero__(self)

    def __bool__(self):
        return _Core.LinearTransformationVector___bool__(self)

    def __len__(self):
        return _Core.LinearTransformationVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.LinearTransformationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.LinearTransformationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.LinearTransformationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.LinearTransformationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.LinearTransformationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.LinearTransformationVector___setitem__(self, *args)

    def pop(self):
        return _Core.LinearTransformationVector_pop(self)

    def append(self, x):
        return _Core.LinearTransformationVector_append(self, x)

    def empty(self):
        return _Core.LinearTransformationVector_empty(self)

    def size(self):
        return _Core.LinearTransformationVector_size(self)

    def swap(self, v):
        return _Core.LinearTransformationVector_swap(self, v)

    def begin(self):
        return _Core.LinearTransformationVector_begin(self)

    def end(self):
        return _Core.LinearTransformationVector_end(self)

    def rbegin(self):
        return _Core.LinearTransformationVector_rbegin(self)

    def rend(self):
        return _Core.LinearTransformationVector_rend(self)

    def clear(self):
        return _Core.LinearTransformationVector_clear(self)

    def get_allocator(self):
        return _Core.LinearTransformationVector_get_allocator(self)

    def pop_back(self):
        return _Core.LinearTransformationVector_pop_back(self)

    def erase(self, *args):
        return _Core.LinearTransformationVector_erase(self, *args)

    def __init__(self, *args):
        _Core.LinearTransformationVector_swiginit(self, _Core.new_LinearTransformationVector(*args))

    def push_back(self, x):
        return _Core.LinearTransformationVector_push_back(self, x)

    def front(self):
        return _Core.LinearTransformationVector_front(self)

    def back(self):
        return _Core.LinearTransformationVector_back(self)

    def assign(self, n, x):
        return _Core.LinearTransformationVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.LinearTransformationVector_resize(self, *args)

    def insert(self, *args):
        return _Core.LinearTransformationVector_insert(self, *args)

    def reserve(self, n):
        return _Core.LinearTransformationVector_reserve(self, n)

    def capacity(self):
        return _Core.LinearTransformationVector_capacity(self)
    __swig_destroy__ = _Core.delete_LinearTransformationVector

# Register LinearTransformationVector in _Core:
_Core.LinearTransformationVector_swigregister(LinearTransformationVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.FloatVector___nonzero__(self)

    def __bool__(self):
        return _Core.FloatVector___bool__(self)

    def __len__(self):
        return _Core.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.FloatVector___setitem__(self, *args)

    def pop(self):
        return _Core.FloatVector_pop(self)

    def append(self, x):
        return _Core.FloatVector_append(self, x)

    def empty(self):
        return _Core.FloatVector_empty(self)

    def size(self):
        return _Core.FloatVector_size(self)

    def swap(self, v):
        return _Core.FloatVector_swap(self, v)

    def begin(self):
        return _Core.FloatVector_begin(self)

    def end(self):
        return _Core.FloatVector_end(self)

    def rbegin(self):
        return _Core.FloatVector_rbegin(self)

    def rend(self):
        return _Core.FloatVector_rend(self)

    def clear(self):
        return _Core.FloatVector_clear(self)

    def get_allocator(self):
        return _Core.FloatVector_get_allocator(self)

    def pop_back(self):
        return _Core.FloatVector_pop_back(self)

    def erase(self, *args):
        return _Core.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _Core.FloatVector_swiginit(self, _Core.new_FloatVector(*args))

    def push_back(self, x):
        return _Core.FloatVector_push_back(self, x)

    def front(self):
        return _Core.FloatVector_front(self)

    def back(self):
        return _Core.FloatVector_back(self)

    def assign(self, n, x):
        return _Core.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _Core.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _Core.FloatVector_reserve(self, n)

    def capacity(self):
        return _Core.FloatVector_capacity(self)
    __swig_destroy__ = _Core.delete_FloatVector

# Register FloatVector in _Core:
_Core.FloatVector_swigregister(FloatVector)

class MeshVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Core.MeshVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Core.MeshVector___nonzero__(self)

    def __bool__(self):
        return _Core.MeshVector___bool__(self)

    def __len__(self):
        return _Core.MeshVector___len__(self)

    def __getslice__(self, i, j):
        return _Core.MeshVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Core.MeshVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Core.MeshVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Core.MeshVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Core.MeshVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Core.MeshVector___setitem__(self, *args)

    def pop(self):
        return _Core.MeshVector_pop(self)

    def append(self, x):
        return _Core.MeshVector_append(self, x)

    def empty(self):
        return _Core.MeshVector_empty(self)

    def size(self):
        return _Core.MeshVector_size(self)

    def swap(self, v):
        return _Core.MeshVector_swap(self, v)

    def begin(self):
        return _Core.MeshVector_begin(self)

    def end(self):
        return _Core.MeshVector_end(self)

    def rbegin(self):
        return _Core.MeshVector_rbegin(self)

    def rend(self):
        return _Core.MeshVector_rend(self)

    def clear(self):
        return _Core.MeshVector_clear(self)

    def get_allocator(self):
        return _Core.MeshVector_get_allocator(self)

    def pop_back(self):
        return _Core.MeshVector_pop_back(self)

    def erase(self, *args):
        return _Core.MeshVector_erase(self, *args)

    def __init__(self, *args):
        _Core.MeshVector_swiginit(self, _Core.new_MeshVector(*args))

    def push_back(self, x):
        return _Core.MeshVector_push_back(self, x)

    def front(self):
        return _Core.MeshVector_front(self)

    def back(self):
        return _Core.MeshVector_back(self)

    def assign(self, n, x):
        return _Core.MeshVector_assign(self, n, x)

    def resize(self, *args):
        return _Core.MeshVector_resize(self, *args)

    def insert(self, *args):
        return _Core.MeshVector_insert(self, *args)

    def reserve(self, n):
        return _Core.MeshVector_reserve(self, n)

    def capacity(self):
        return _Core.MeshVector_capacity(self)
    __swig_destroy__ = _Core.delete_MeshVector

# Register MeshVector in _Core:
_Core.MeshVector_swigregister(MeshVector)

class XYZMeshData(CMeshDataBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def InsertVTKData(self, Parent):
        return _Core.XYZMeshData_InsertVTKData(self, Parent)

    @staticmethod
    def GetVTKDataType():
        return _Core.XYZMeshData_GetVTKDataType()

    @staticmethod
    def GetNumberOfComponents():
        return _Core.XYZMeshData_GetNumberOfComponents()

    def WriteVTKDataElement(self, output, Element):
        return _Core.XYZMeshData_WriteVTKDataElement(self, output, Element)
    m_Data = property(_Core.XYZMeshData_m_Data_get, _Core.XYZMeshData_m_Data_set)

    def __init__(self, *args):
        _Core.XYZMeshData_swiginit(self, _Core.new_XYZMeshData(*args))
    __swig_destroy__ = _Core.delete_XYZMeshData

# Register XYZMeshData in _Core:
_Core.XYZMeshData_swigregister(XYZMeshData)

def XYZMeshData_GetVTKDataType():
    return _Core.XYZMeshData_GetVTKDataType()

def XYZMeshData_GetNumberOfComponents():
    return _Core.XYZMeshData_GetNumberOfComponents()

PI = _Core.PI
class WXYZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    w = property(_Core.WXYZ_w_get, _Core.WXYZ_w_set)
    x = property(_Core.WXYZ_x_get, _Core.WXYZ_x_set)
    y = property(_Core.WXYZ_y_get, _Core.WXYZ_y_set)
    z = property(_Core.WXYZ_z_get, _Core.WXYZ_z_set)

    def __repr__(self):
        return _Core.WXYZ___repr__(self)

    def __add__(self, Vector):
        return _Core.WXYZ___add__(self, Vector)

    def __sub__(self, Vector):
        return _Core.WXYZ___sub__(self, Vector)

    def __mul__(self, *args):
        return _Core.WXYZ___mul__(self, *args)

    def __init__(self, *args):
        _Core.WXYZ_swiginit(self, _Core.new_WXYZ(*args))
    __swig_destroy__ = _Core.delete_WXYZ

# Register WXYZ in _Core:
_Core.WXYZ_swigregister(WXYZ)

class XYZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    x = property(_Core.XYZ_x_get, _Core.XYZ_x_set)
    y = property(_Core.XYZ_y_get, _Core.XYZ_y_set)
    z = property(_Core.XYZ_z_get, _Core.XYZ_z_set)

    def __nonzero__(self):
        return _Core.XYZ___nonzero__(self)
    __bool__ = __nonzero__



    def __neg__(self):
        return _Core.XYZ___neg__(self)

    def __repr__(self):
        return _Core.XYZ___repr__(self)

    def __add__(self, Vector):
        return _Core.XYZ___add__(self, Vector)

    def __sub__(self, Vector):
        return _Core.XYZ___sub__(self, Vector)

    def __mul__(self, *args):
        return _Core.XYZ___mul__(self, *args)

    def __init__(self, *args):
        _Core.XYZ_swiginit(self, _Core.new_XYZ(*args))
    __swig_destroy__ = _Core.delete_XYZ

# Register XYZ in _Core:
_Core.XYZ_swigregister(XYZ)

class XY(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    x = property(_Core.XY_x_get, _Core.XY_x_set)
    y = property(_Core.XY_y_get, _Core.XY_y_set)

    def __eq__(self, right):
        return _Core.XY___eq__(self, right)

    def __nonzero__(self):
        return _Core.XY___nonzero__(self)
    __bool__ = __nonzero__



    def __neg__(self):
        return _Core.XY___neg__(self)

    def __repr__(self):
        return _Core.XY___repr__(self)

    def __add__(self, Vector):
        return _Core.XY___add__(self, Vector)

    def __sub__(self, Vector):
        return _Core.XY___sub__(self, Vector)

    def __mul__(self, *args):
        return _Core.XY___mul__(self, *args)

    def __init__(self, *args):
        _Core.XY_swiginit(self, _Core.new_XY(*args))
    __swig_destroy__ = _Core.delete_XY

# Register XY in _Core:
_Core.XY_swigregister(XY)


def Convert(Val):
    return _Core.Convert(Val)

def __eq__(*args):
    return _Core.__eq__(*args)

def __add__(*args):
    return _Core.__add__(*args)

def __iadd__(*args):
    return _Core.__iadd__(*args)

def __sub__(*args):
    return _Core.__sub__(*args)

def __isub__(*args):
    return _Core.__isub__(*args)

def __itruediv__(*args):
    return _Core.__itruediv__(*args)

def __imul__(*args):
    return _Core.__imul__(*args)

def __truediv__(*args):
    return _Core.__truediv__(*args)

def __rshift__(*args):
    return _Core.__rshift__(*args)

def DotProduct(*args):
    return _Core.DotProduct(*args)

def CrossProduct(left, right):
    return _Core.CrossProduct(left, right)

def RandomNumber(dMin, dMax):
    return _Core.RandomNumber(dMin, dMax)

def GetLength(*args):
    return _Core.GetLength(*args)

def GetLengthSquared(*args):
    return _Core.GetLengthSquared(*args)

def Normalise(*args):
    return _Core.Normalise(*args)

def __mul__(*args):
    return _Core.__mul__(*args)

def SphereSphereIntersect(p1, p2, dRadii):
    return _Core.SphereSphereIntersect(p1, p2, dRadii)

def ShortestDistPointLine(Point, LineStart, LineEnd, dU):
    return _Core.ShortestDistPointLine(Point, LineStart, LineEnd, dU)

def SphereCylinderIntersect(Point, LineStart, LineEnd, dRadii, pdUReturn=None):
    return _Core.SphereCylinderIntersect(Point, LineStart, LineEnd, dRadii, pdUReturn)

def LineLineIntersect2D(p1, p2, p3, p4, dU1, dU2):
    return _Core.LineLineIntersect2D(p1, p2, p3, p4, dU1, dU2)

def ShortestDistLineLine(p1, p2, p3, p4, dU1, dU2, pa, pb):
    return _Core.ShortestDistLineLine(p1, p2, p3, p4, dU1, dU2, pa, pb)

def RoundedCylinderIntersect(p1, p2, p3, p4, dRadii, pdU1=None, pdU2=None):
    return _Core.RoundedCylinderIntersect(p1, p2, p3, p4, dRadii, pdU1, pdU2)

def BoundingBoxIntersect(BBox1Min, BBox1Max, BBox2Min, BBox2Max, dTolerance=0):
    return _Core.BoundingBoxIntersect(BBox1Min, BBox1Max, BBox2Min, BBox2Max, dTolerance)

def PointInsideBox(Point, BoxMin, BoxMax, dTolerance=0):
    return _Core.PointInsideBox(Point, BoxMin, BoxMax, dTolerance)

def GetLocalCoordinateSystem(LocalX, LocalY, LocalZ, Point1, Point2):
    return _Core.GetLocalCoordinateSystem(LocalX, LocalY, LocalZ, Point1, Point2)

def GetIntersectionLinePlane(p1, p2, p3, N, Intersection, pdU=None):
    return _Core.GetIntersectionLinePlane(p1, p2, p3, N, Intersection, pdU)

def GetRandomColor(r, g, b):
    return _Core.GetRandomColor(r, g, b)

def GetFractionColor(dFraction, r, g, b):
    return _Core.GetFractionColor(dFraction, r, g, b)

def GetCircleCenter(A, B, C, Center):
    return _Core.GetCircleCenter(A, B, C, Center)

def Max(*args):
    return _Core.Max(*args)

def Min(*args):
    return _Core.Min(*args)

def Round(dValue):
    return _Core.Round(dValue)

def RandomNormalDistribution(dStandrdDeviation=1, dAverage=0):
    return _Core.RandomNormalDistribution(dStandrdDeviation, dAverage)

def GetArea(Points, iNumPoints):
    return _Core.GetArea(Points, iNumPoints)

def PointInsideTriangle(*args):
    return _Core.PointInsideTriangle(*args)

def PointInsideTriangleAccuracy(P1, P2, P3, P, N):
    return _Core.PointInsideTriangleAccuracy(P1, P2, P3, P, N)

def PointInsideTriangle2D(P1, P2, P3, P, pNormal=None):
    return _Core.PointInsideTriangle2D(P1, P2, P3, P, pNormal)

def ShortestDistPointTriangle(P1, P2, P3, P, pTrianglePoint=None, pNormal=None):
    return _Core.ShortestDistPointTriangle(P1, P2, P3, P, pTrianglePoint, pNormal)

def GetBarycentricCoordinates(P1, P2, P3, P):
    return _Core.GetBarycentricCoordinates(P1, P2, P3, P)

def GetClosestPointIndex(*args):
    return _Core.GetClosestPointIndex(*args)

def GetClosestPointWithinTol(*args):
    return _Core.GetClosestPointWithinTol(*args)

def GetClosestPoint(*args):
    return _Core.GetClosestPoint(*args)
class CMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _Core.CMatrix_swiginit(self, _Core.new_CMatrix(*args))
    __swig_destroy__ = _Core.delete_CMatrix

    def Initialise(self, iHeight, iWidth):
        return _Core.CMatrix_Initialise(self, iHeight, iWidth)

    def InitialiseIdentity(self, iSize):
        return _Core.CMatrix_InitialiseIdentity(self, iSize)

    def GetTranspose(self):
        return _Core.CMatrix_GetTranspose(self)

    def GetSubMatrix(self, SubMatrix, iRow, iColumn):
        return _Core.CMatrix_GetSubMatrix(self, SubMatrix, iRow, iColumn)

    def SetSubMatrix(self, SubMatrix, iRow, iColumn):
        return _Core.CMatrix_SetSubMatrix(self, SubMatrix, iRow, iColumn)

    def ZeroMatrix(self):
        return _Core.CMatrix_ZeroMatrix(self)

    def __call__(self, *args):
        return _Core.CMatrix___call__(self, *args)

    def GetValue(self, i, j):
        return _Core.CMatrix_GetValue(self, i, j)

    def SetValue(self, i, j, dVal):
        return _Core.CMatrix_SetValue(self, i, j, dVal)

    def __imul__(self, dRight):
        return _Core.CMatrix___imul__(self, dRight)

    def __itruediv__(self, *args):
        return _Core.CMatrix___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __iadd__(self, RightMatrix):
        return _Core.CMatrix___iadd__(self, RightMatrix)

    def __isub__(self, RightMatrix):
        return _Core.CMatrix___isub__(self, RightMatrix)

    def GetDeterminant(self):
        return _Core.CMatrix_GetDeterminant(self)

    def GetInverse(self, Inverse):
        return _Core.CMatrix_GetInverse(self, Inverse)

    def GetSquareRoot(self, Root):
        return _Core.CMatrix_GetSquareRoot(self, Root)

    def GetEigen(self, EigenVectors, EigenValues):
        return _Core.CMatrix_GetEigen(self, EigenVectors, EigenValues)

    def GetPolarDecomposition(self, U, P):
        return _Core.CMatrix_GetPolarDecomposition(self, U, P)

    def Empty(self):
        return _Core.CMatrix_Empty(self)

    def GetHeight(self):
        return _Core.CMatrix_GetHeight(self)

    def GetWidth(self):
        return _Core.CMatrix_GetWidth(self)

    def SwapRows(self, iRow1, iRow2):
        return _Core.CMatrix_SwapRows(self, iRow1, iRow2)

    def SwapColumns(self, iColumn1, iColumn2):
        return _Core.CMatrix_SwapColumns(self, iColumn1, iColumn2)

    def DivideRow(self, iRow, dDivisor):
        return _Core.CMatrix_DivideRow(self, iRow, dDivisor)

    def DivideColumn(self, iColumn, dDivisor):
        return _Core.CMatrix_DivideColumn(self, iColumn, dDivisor)

    def SubtractRow(self, iRow1, iRow2, dScale):
        return _Core.CMatrix_SubtractRow(self, iRow1, iRow2, dScale)

    def SubtractColumn(self, iColumn1, iColumn2, dScale):
        return _Core.CMatrix_SubtractColumn(self, iColumn1, iColumn2, dScale)

    def Identity(self):
        return _Core.CMatrix_Identity(self)

    def EqualsMultiple(self, LeftMatrix, RightMatrix):
        return _Core.CMatrix_EqualsMultiple(self, LeftMatrix, RightMatrix)

    def EqualsTransposeMultiple(self, LeftMatrix, RightMatrix):
        return _Core.CMatrix_EqualsTransposeMultiple(self, LeftMatrix, RightMatrix)

    def EqualsMultipleTranspose(self, LeftMatrix, RightMatrix):
        return _Core.CMatrix_EqualsMultipleTranspose(self, LeftMatrix, RightMatrix)

    def PrintMatrix(self, *args):
        return _Core.CMatrix_PrintMatrix(self, *args)

    def __repr__(self):
        return _Core.CMatrix___repr__(self)

    def __add__(self, *args):
        return _Core.CMatrix___add__(self, *args)

    def __sub__(self, *args):
        return _Core.CMatrix___sub__(self, *args)

    def __mul__(self, *args):
        return _Core.CMatrix___mul__(self, *args)

# Register CMatrix in _Core:
_Core.CMatrix_swigregister(CMatrix)


def __lshift__(*args):
    return _Core.__lshift__(*args)
class CLinearTransformation(CMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _Core.delete_CLinearTransformation

    def ResetTransformation(self):
        return _Core.CLinearTransformation_ResetTransformation(self)

    def MultiplyTransformation(self, Deformation):
        return _Core.CLinearTransformation_MultiplyTransformation(self, Deformation)

    def AddScale(self, dXScale=1, dYScale=1, dZScale=1):
        return _Core.CLinearTransformation_AddScale(self, dXScale, dYScale, dZScale)

    def AddSheardYbydX(self, dValue):
        return _Core.CLinearTransformation_AddSheardYbydX(self, dValue)

    def AddSheardZbydX(self, dValue):
        return _Core.CLinearTransformation_AddSheardZbydX(self, dValue)

    def AddSheardXbydY(self, dValue):
        return _Core.CLinearTransformation_AddSheardXbydY(self, dValue)

    def AddSheardZbydY(self, dValue):
        return _Core.CLinearTransformation_AddSheardZbydY(self, dValue)

    def AddSheardXbydZ(self, dValue):
        return _Core.CLinearTransformation_AddSheardXbydZ(self, dValue)

    def AddSheardYbydZ(self, dValue):
        return _Core.CLinearTransformation_AddSheardYbydZ(self, dValue)

    def Rotate(self, Rotation):
        return _Core.CLinearTransformation_Rotate(self, Rotation)

    def __repr__(self):
        return _Core.CLinearTransformation___repr__(self)

    def __add__(self, Matrix):
        return _Core.CLinearTransformation___add__(self, Matrix)

    def __sub__(self, Matrix):
        return _Core.CLinearTransformation___sub__(self, Matrix)

    def __mul__(self, *args):
        return _Core.CLinearTransformation___mul__(self, *args)

    def __init__(self, *args):
        _Core.CLinearTransformation_swiginit(self, _Core.new_CLinearTransformation(*args))

# Register CLinearTransformation in _Core:
_Core.CLinearTransformation_swigregister(CLinearTransformation)

class CProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def WriteAttribute(self, Element, AttributeName):
        return _Core.CProperty_WriteAttribute(self, Element, AttributeName)

    def ReadAttribute(self, Element, AttributeName):
        return _Core.CProperty_ReadAttribute(self, Element, AttributeName)

    def GetString(self):
        return _Core.CProperty_GetString(self)

    def GetSIValue(self):
        return _Core.CProperty_GetSIValue(self)

    def SetValue(self, *args):
        return _Core.CProperty_SetValue(self, *args)

    def SetUnits(self, Units):
        return _Core.CProperty_SetUnits(self, Units)

    def Reset(self):
        return _Core.CProperty_Reset(self)

    def GetValue(self, *args):
        return _Core.CProperty_GetValue(self, *args)

    def GetUnits(self):
        return _Core.CProperty_GetUnits(self)

    def GetSIUnits(self):
        return _Core.CProperty_GetSIUnits(self)

    def IsSet(self):
        return _Core.CProperty_IsSet(self)

    def __init__(self, *args):
        _Core.CProperty_swiginit(self, _Core.new_CProperty(*args))
    __swig_destroy__ = _Core.delete_CProperty

# Register CProperty in _Core:
_Core.CProperty_swigregister(CProperty)

class CProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CProperties

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CProperties_PopulateTiXmlElement(self, Element, OutputType)

    def SetYarnLinearDensity(self, *args):
        return _Core.CProperties_SetYarnLinearDensity(self, *args)

    def SetFibreDensity(self, *args):
        return _Core.CProperties_SetFibreDensity(self, *args)

    def SetFibreDiameter(self, *args):
        return _Core.CProperties_SetFibreDiameter(self, *args)

    def SetFibresPerYarn(self, iValue):
        return _Core.CProperties_SetFibresPerYarn(self, iValue)

    def SetYoungsModulus(self, *args):
        return _Core.CProperties_SetYoungsModulus(self, *args)

    def SetYoungsModulusX(self, *args):
        return _Core.CProperties_SetYoungsModulusX(self, *args)

    def SetYoungsModulusY(self, *args):
        return _Core.CProperties_SetYoungsModulusY(self, *args)

    def SetYoungsModulusZ(self, *args):
        return _Core.CProperties_SetYoungsModulusZ(self, *args)

    def SetShearModulusXY(self, *args):
        return _Core.CProperties_SetShearModulusXY(self, *args)

    def SetShearModulusXZ(self, *args):
        return _Core.CProperties_SetShearModulusXZ(self, *args)

    def SetShearModulusYZ(self, *args):
        return _Core.CProperties_SetShearModulusYZ(self, *args)

    def SetPoissonsRatio(self, dValue):
        return _Core.CProperties_SetPoissonsRatio(self, dValue)

    def SetPoissonsRatioX(self, dValue):
        return _Core.CProperties_SetPoissonsRatioX(self, dValue)

    def SetPoissonsRatioY(self, dValue):
        return _Core.CProperties_SetPoissonsRatioY(self, dValue)

    def SetPoissonsRatioZ(self, dValue):
        return _Core.CProperties_SetPoissonsRatioZ(self, dValue)

    def SetAlphaX(self, *args):
        return _Core.CProperties_SetAlphaX(self, *args)

    def SetAlphaY(self, *args):
        return _Core.CProperties_SetAlphaY(self, *args)

    def SetAlphaZ(self, *args):
        return _Core.CProperties_SetAlphaZ(self, *args)

    def SetFibreArea(self, *args):
        return _Core.CProperties_SetFibreArea(self, *args)

    def ResetYarnLinearDensity(self):
        return _Core.CProperties_ResetYarnLinearDensity(self)

    def ResetFibreDensity(self):
        return _Core.CProperties_ResetFibreDensity(self)

    def ResetFibreDiameter(self):
        return _Core.CProperties_ResetFibreDiameter(self)

    def ResetFibresPerYarn(self):
        return _Core.CProperties_ResetFibresPerYarn(self)

    def ResetFibreArea(self):
        return _Core.CProperties_ResetFibreArea(self)

    def ResetYoungsModulusX(self):
        return _Core.CProperties_ResetYoungsModulusX(self)

    def ResetYoungsModulusY(self):
        return _Core.CProperties_ResetYoungsModulusY(self)

    def ResetYoungsModulusZ(self):
        return _Core.CProperties_ResetYoungsModulusZ(self)

    def ResetShearModulusXY(self):
        return _Core.CProperties_ResetShearModulusXY(self)

    def ResetShearModulusXZ(self):
        return _Core.CProperties_ResetShearModulusXZ(self)

    def ResetShearModulusYZ(self):
        return _Core.CProperties_ResetShearModulusYZ(self)

    def ResetAlphaX(self):
        return _Core.CProperties_ResetAlphaX(self)

    def ResetAlphaY(self):
        return _Core.CProperties_ResetAlphaY(self)

    def ResetAlphaZ(self):
        return _Core.CProperties_ResetAlphaZ(self)

    def ResetPoissonsRatioX(self):
        return _Core.CProperties_ResetPoissonsRatioX(self)

    def ResetPoissonsRatioY(self):
        return _Core.CProperties_ResetPoissonsRatioY(self)

    def ResetPoissonsRatioZ(self):
        return _Core.CProperties_ResetPoissonsRatioZ(self)

    def GetYarnLinearDensity(self, *args):
        return _Core.CProperties_GetYarnLinearDensity(self, *args)

    def GetFibreDensity(self, *args):
        return _Core.CProperties_GetFibreDensity(self, *args)

    def GetFibreDiameter(self, *args):
        return _Core.CProperties_GetFibreDiameter(self, *args)

    def GetFibresPerYarn(self):
        return _Core.CProperties_GetFibresPerYarn(self)

    def GetFibreArea(self, *args):
        return _Core.CProperties_GetFibreArea(self, *args)

    def GetYoungsModulusX(self, *args):
        return _Core.CProperties_GetYoungsModulusX(self, *args)

    def GetYoungsModulusY(self, *args):
        return _Core.CProperties_GetYoungsModulusY(self, *args)

    def GetYoungsModulusZ(self, *args):
        return _Core.CProperties_GetYoungsModulusZ(self, *args)

    def GetShearModulusXY(self, *args):
        return _Core.CProperties_GetShearModulusXY(self, *args)

    def GetShearModulusXZ(self, *args):
        return _Core.CProperties_GetShearModulusXZ(self, *args)

    def GetShearModulusYZ(self, *args):
        return _Core.CProperties_GetShearModulusYZ(self, *args)

    def GetAlphaX(self, *args):
        return _Core.CProperties_GetAlphaX(self, *args)

    def GetAlphaY(self, *args):
        return _Core.CProperties_GetAlphaY(self, *args)

    def GetAlphaZ(self, *args):
        return _Core.CProperties_GetAlphaZ(self, *args)

    def GetPoissonsRatioX(self):
        return _Core.CProperties_GetPoissonsRatioX(self)

    def GetPoissonsRatioY(self):
        return _Core.CProperties_GetPoissonsRatioY(self)

    def GetPoissonsRatioZ(self):
        return _Core.CProperties_GetPoissonsRatioZ(self)
    m_YarnLinearDensity = property(_Core.CProperties_m_YarnLinearDensity_get, _Core.CProperties_m_YarnLinearDensity_set)
    m_FibreDensity = property(_Core.CProperties_m_FibreDensity_get, _Core.CProperties_m_FibreDensity_set)
    m_FibreArea = property(_Core.CProperties_m_FibreArea_get, _Core.CProperties_m_FibreArea_set)
    m_FibreDiameter = property(_Core.CProperties_m_FibreDiameter_get, _Core.CProperties_m_FibreDiameter_set)
    m_YoungsModulusX = property(_Core.CProperties_m_YoungsModulusX_get, _Core.CProperties_m_YoungsModulusX_set)
    m_YoungsModulusY = property(_Core.CProperties_m_YoungsModulusY_get, _Core.CProperties_m_YoungsModulusY_set)
    m_YoungsModulusZ = property(_Core.CProperties_m_YoungsModulusZ_get, _Core.CProperties_m_YoungsModulusZ_set)
    m_ShearModulusXY = property(_Core.CProperties_m_ShearModulusXY_get, _Core.CProperties_m_ShearModulusXY_set)
    m_ShearModulusXZ = property(_Core.CProperties_m_ShearModulusXZ_get, _Core.CProperties_m_ShearModulusXZ_set)
    m_ShearModulusYZ = property(_Core.CProperties_m_ShearModulusYZ_get, _Core.CProperties_m_ShearModulusYZ_set)
    m_AlphaX = property(_Core.CProperties_m_AlphaX_get, _Core.CProperties_m_AlphaX_set)
    m_AlphaY = property(_Core.CProperties_m_AlphaY_get, _Core.CProperties_m_AlphaY_set)
    m_AlphaZ = property(_Core.CProperties_m_AlphaZ_get, _Core.CProperties_m_AlphaZ_set)
    m_CalculatedArea = property(_Core.CProperties_m_CalculatedArea_get, _Core.CProperties_m_CalculatedArea_set)

    def __init__(self, *args):
        _Core.CProperties_swiginit(self, _Core.new_CProperties(*args))

# Register CProperties in _Core:
_Core.CProperties_swigregister(CProperties)

class CPropertiesTextile(CProperties):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CPropertiesTextile

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CPropertiesTextile_PopulateTiXmlElement(self, Element, OutputType)

    def SetGeometryScale(self, Units):
        return _Core.CPropertiesTextile_SetGeometryScale(self, Units)

    def SetArealDensity(self, *args):
        return _Core.CPropertiesTextile_SetArealDensity(self, *args)

    def ResetArealDensity(self):
        return _Core.CPropertiesTextile_ResetArealDensity(self)

    def SetMatrixYoungsModulus(self, *args):
        return _Core.CPropertiesTextile_SetMatrixYoungsModulus(self, *args)

    def SetMatrixPoissonsRatio(self, dValue):
        return _Core.CPropertiesTextile_SetMatrixPoissonsRatio(self, dValue)

    def SetMatrixAlpha(self, dValue):
        return _Core.CPropertiesTextile_SetMatrixAlpha(self, dValue)

    def GetGeometryScale(self):
        return _Core.CPropertiesTextile_GetGeometryScale(self)

    def GetArealDensity(self, *args):
        return _Core.CPropertiesTextile_GetArealDensity(self, *args)

    def GetMatrixYoungsModulus(self, *args):
        return _Core.CPropertiesTextile_GetMatrixYoungsModulus(self, *args)

    def GetMatrixPoissonsRatio(self):
        return _Core.CPropertiesTextile_GetMatrixPoissonsRatio(self)

    def GetMatrixAlpha(self):
        return _Core.CPropertiesTextile_GetMatrixAlpha(self)
    m_ArealDensity = property(_Core.CPropertiesTextile_m_ArealDensity_get, _Core.CPropertiesTextile_m_ArealDensity_set)
    m_MatrixYoungsModulus = property(_Core.CPropertiesTextile_m_MatrixYoungsModulus_get, _Core.CPropertiesTextile_m_MatrixYoungsModulus_set)

    def __init__(self, *args):
        _Core.CPropertiesTextile_swiginit(self, _Core.new_CPropertiesTextile(*args))

# Register CPropertiesTextile in _Core:
_Core.CPropertiesTextile_swigregister(CPropertiesTextile)

class CPropertiesYarn(CProperties):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CPropertiesYarn

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CPropertiesYarn_PopulateTiXmlElement(self, Element, OutputType)

    def __init__(self, *args):
        _Core.CPropertiesYarn_swiginit(self, _Core.new_CPropertiesYarn(*args))

# Register CPropertiesYarn in _Core:
_Core.CPropertiesYarn_swigregister(CPropertiesYarn)

class CMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CMesh
    TRI = _Core.CMesh_TRI
    QUAD = _Core.CMesh_QUAD
    TET = _Core.CMesh_TET
    PYRAMID = _Core.CMesh_PYRAMID
    WEDGE = _Core.CMesh_WEDGE
    HEX = _Core.CMesh_HEX
    LINE = _Core.CMesh_LINE
    POLYLINE = _Core.CMesh_POLYLINE
    QUADRATIC_TET = _Core.CMesh_QUADRATIC_TET
    POLYGON = _Core.CMesh_POLYGON
    NUM_ELEMENT_TYPES = _Core.CMesh_NUM_ELEMENT_TYPES

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CMesh_PopulateTiXmlElement(self, Element, OutputType)

    def ConvertQuadtoTriangles(self, itQuad):
        return _Core.CMesh_ConvertQuadtoTriangles(self, itQuad)

    def ConvertTrianglestoSegments(self):
        return _Core.CMesh_ConvertTrianglestoSegments(self)

    def ConvertQuadstoTriangles(self, bQuality=True):
        return _Core.CMesh_ConvertQuadstoTriangles(self, bQuality)

    def ConvertHextoQuad(self):
        return _Core.CMesh_ConvertHextoQuad(self)

    def ConvertWedgeto2D(self):
        return _Core.CMesh_ConvertWedgeto2D(self)

    def ConvertTettoTriangle(self):
        return _Core.CMesh_ConvertTettoTriangle(self)

    def ConvertHextoWedge(self, bQuality=True):
        return _Core.CMesh_ConvertHextoWedge(self, bQuality)

    def ConvertWedgetoTetandPyramid(self, bQuality=True):
        return _Core.CMesh_ConvertWedgetoTetandPyramid(self, bQuality)

    def ConvertPyramidtoTet(self, bQuality=True):
        return _Core.CMesh_ConvertPyramidtoTet(self, bQuality)

    def ConvertWedgetoTet(self, bQuality=True):
        return _Core.CMesh_ConvertWedgetoTet(self, bQuality)

    def ConvertHextoTet(self, bQuality=True):
        return _Core.CMesh_ConvertHextoTet(self, bQuality)

    def ConvertPyramidto2D(self):
        return _Core.CMesh_ConvertPyramidto2D(self)

    def Convert3Dto2D(self):
        return _Core.CMesh_Convert3Dto2D(self)

    def ConvertToSurfaceMesh(self):
        return _Core.CMesh_ConvertToSurfaceMesh(self)

    def ConvertToTetMesh(self):
        return _Core.CMesh_ConvertToTetMesh(self)

    def ConvertToTriangleMesh(self):
        return _Core.CMesh_ConvertToTriangleMesh(self)

    def ConvertToSegmentMesh(self):
        return _Core.CMesh_ConvertToSegmentMesh(self)

    def ConvertTriToQuad(self, Tolerance=1e-6):
        return _Core.CMesh_ConvertTriToQuad(self, Tolerance)

    def GetAABB(self, dGrowDistance=0):
        return _Core.CMesh_GetAABB(self, dGrowDistance)

    def MergeNodes(self, Tolerance=1e-8):
        return _Core.CMesh_MergeNodes(self, Tolerance)

    def RemoveUnreferencedNodes(self):
        return _Core.CMesh_RemoveUnreferencedNodes(self)

    def RemoveAllElementsExcept(self, Type):
        return _Core.CMesh_RemoveAllElementsExcept(self, Type)

    def RemoveElementType(self, Type):
        return _Core.CMesh_RemoveElementType(self, Type)

    def DeleteNodes(self, Nodes):
        return _Core.CMesh_DeleteNodes(self, Nodes)

    def ChangeNodeIndices(self, *args):
        return _Core.CMesh_ChangeNodeIndices(self, *args)

    def RemoveOpposingTriangles(self):
        return _Core.CMesh_RemoveOpposingTriangles(self)

    def RemoveOpposingQuads(self):
        return _Core.CMesh_RemoveOpposingQuads(self)

    def RemoveDegenerateTriangles(self):
        return _Core.CMesh_RemoveDegenerateTriangles(self)

    def RemoveDuplicateTriangles(self):
        return _Core.CMesh_RemoveDuplicateTriangles(self)

    def RemoveDuplicateSegments(self):
        return _Core.CMesh_RemoveDuplicateSegments(self)

    def RemoveDuplicateElements(self, ElementType):
        return _Core.CMesh_RemoveDuplicateElements(self, ElementType)

    def GetNodeElementReferences(self, References):
        return _Core.CMesh_GetNodeElementReferences(self, References)

    def InsertNodes(self, *args):
        return _Core.CMesh_InsertNodes(self, *args)

    def InsertMesh(self, *args):
        return _Core.CMesh_InsertMesh(self, *args)

    def Rotate(self, *args):
        return _Core.CMesh_Rotate(self, *args)

    def Translate(self, Vector):
        return _Core.CMesh_Translate(self, Vector)

    def FlipNormals(self):
        return _Core.CMesh_FlipNormals(self)

    def MeshClosedLoop(self, Normal, ClosedLoopVector, bQuality=False):
        return _Core.CMesh_MeshClosedLoop(self, Normal, ClosedLoopVector, bQuality)

    def MeshConvexHull(self):
        return _Core.CMesh_MeshConvexHull(self)

    def Clear(self):
        return _Core.CMesh_Clear(self)

    def CopySelfToRange(self, Vector, iLowerLimit, iUpperLimit):
        return _Core.CMesh_CopySelfToRange(self, Vector, iLowerLimit, iUpperLimit)

    def OutputNodes(self, *args):
        return _Core.CMesh_OutputNodes(self, *args)

    def OutputElements(self, *args):
        return _Core.CMesh_OutputElements(self, *args)

    def CalculateVolume(self):
        return _Core.CMesh_CalculateVolume(self)

    def GetElementCenters(self, *args):
        return _Core.CMesh_GetElementCenters(self, *args)

    def CountInvertedElements(self, *args):
        return _Core.CMesh_CountInvertedElements(self, *args)

    def IntersectLine(self, *args):
        return _Core.CMesh_IntersectLine(self, *args)

    def BuildGrid(self, *args):
        return _Core.CMesh_BuildGrid(self, *args)

    def GetNodePairs(self, *args):
        return _Core.CMesh_GetNodePairs(self, *args)

    def GetClosestNode(self, Position):
        return _Core.CMesh_GetClosestNode(self, Position)

    def GetClosestNodeDistance(self, Position, dTol):
        return _Core.CMesh_GetClosestNodeDistance(self, Position, dTol)

    def ConvertElementListToVector(self, ElementType, Indices):
        return _Core.CMesh_ConvertElementListToVector(self, ElementType, Indices)

    def SaveToSTL(self, Filename, bBinary=True):
        return _Core.CMesh_SaveToSTL(self, Filename, bBinary)

    def SaveToVTK(self, Filename, pMeshData=None):
        return _Core.CMesh_SaveToVTK(self, Filename, pMeshData)

    def SaveToABAQUS(self, Filename, pElementInfo=None, bCreateStep=True, bCreateMaterial=True, iElementType=0):
        return _Core.CMesh_SaveToABAQUS(self, Filename, pElementInfo, bCreateStep, bCreateMaterial, iElementType)

    def SaveToSMESH(self, Filename):
        return _Core.CMesh_SaveToSMESH(self, Filename)

    def SaveToSCIRun(self, Filename):
        return _Core.CMesh_SaveToSCIRun(self, Filename)

    def AddElement(self, Type, Indices):
        return _Core.CMesh_AddElement(self, Type, Indices)

    def GetNumElements(self, *args):
        return _Core.CMesh_GetNumElements(self, *args)

    def NodesBegin(self, *args):
        return _Core.CMesh_NodesBegin(self, *args)

    def NodesEnd(self, *args):
        return _Core.CMesh_NodesEnd(self, *args)

    def AddNode(self, Node):
        return _Core.CMesh_AddNode(self, Node)

    def SetNode(self, iIndex, Node):
        return _Core.CMesh_SetNode(self, iIndex, Node)

    def GetNode(self, iIndex):
        return _Core.CMesh_GetNode(self, iIndex)

    def DeleteNode(self, it):
        return _Core.CMesh_DeleteNode(self, it)

    def GetNumNodes(self, *args):
        return _Core.CMesh_GetNumNodes(self, *args)

    def NodesEmpty(self):
        return _Core.CMesh_NodesEmpty(self)

    def GetNodes(self, *args):
        return _Core.CMesh_GetNodes(self, *args)

    def SetNumNodes(self, NumNodes):
        return _Core.CMesh_SetNumNodes(self, NumNodes)

    def GetIndices(self, *args):
        return _Core.CMesh_GetIndices(self, *args)

    def __init__(self, *args):
        _Core.CMesh_swiginit(self, _Core.new_CMesh(*args))

# Register CMesh in _Core:
_Core.CMesh_swigregister(CMesh)

class CBasicVolumes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CBasicVolumes

    def CreateBasicVolumes(self, *args):
        return _Core.CBasicVolumes_CreateBasicVolumes(self, *args)

    def SetSeed(self, dSeed):
        return _Core.CBasicVolumes_SetSeed(self, dSeed)

    def GetSeed(self):
        return _Core.CBasicVolumes_GetSeed(self)

    def SetPeriodic(self, bPeriodic):
        return _Core.CBasicVolumes_SetPeriodic(self, bPeriodic)

    def GetPeriodic(self):
        return _Core.CBasicVolumes_GetPeriodic(self)

    def SetDebug(self, bDebug):
        return _Core.CBasicVolumes_SetDebug(self, bDebug)

    def GetDebug(self):
        return _Core.CBasicVolumes_GetDebug(self)

    def __init__(self, *args):
        _Core.CBasicVolumes_swiginit(self, _Core.new_CBasicVolumes(*args))

# Register CBasicVolumes in _Core:
_Core.CBasicVolumes_swigregister(CBasicVolumes)

FACE_A = _Core.FACE_A
FACE_B = _Core.FACE_B
FACE_C = _Core.FACE_C
FACE_D = _Core.FACE_D
FACE_E = _Core.FACE_E
FACE_F = _Core.FACE_F
class CMesherBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CMesherBase

    def CreateMesh(self, *args):
        return _Core.CMesherBase_CreateMesh(self, *args)

# Register CMesherBase in _Core:
_Core.CMesherBase_swigregister(CMesherBase)

class CMesher(CMesherBase, CBasicVolumes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CMesher

    def CreateMesh(self, *args):
        return _Core.CMesher_CreateMesh(self, *args)

    def SetMergeTolerance(self, dMergeTolerance):
        return _Core.CMesher_SetMergeTolerance(self, dMergeTolerance)

    def GetMergeTolerance(self):
        return _Core.CMesher_GetMergeTolerance(self)

    def SetHybrid(self, bHybrid):
        return _Core.CMesher_SetHybrid(self, bHybrid)

    def GetHybrid(self):
        return _Core.CMesher_GetHybrid(self)

    def SetQuadratic(self, bQuadratic):
        return _Core.CMesher_SetQuadratic(self, bQuadratic)

    def GetQuadratic(self):
        return _Core.CMesher_GetQuadratic(self)

    def SetProjectMidSideNodes(self, bProjectMidSideNodes):
        return _Core.CMesher_SetProjectMidSideNodes(self, bProjectMidSideNodes)

    def GetProjectMidSideNodes(self):
        return _Core.CMesher_GetProjectMidSideNodes(self)

    def SaveVolumeMeshToVTK(self, Filename):
        return _Core.CMesher_SaveVolumeMeshToVTK(self, Filename)

    def SaveVolumeMeshToABAQUS(self, *args):
        return _Core.CMesher_SaveVolumeMeshToABAQUS(self, *args)

    def GetMesh(self):
        return _Core.CMesher_GetMesh(self)

    def GetElementData(self, ElementType):
        return _Core.CMesher_GetElementData(self, ElementType)

    def __init__(self, *args):
        _Core.CMesher_swiginit(self, _Core.new_CMesher(*args))

# Register CMesher in _Core:
_Core.CMesher_swigregister(CMesher)

class CNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CNode

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CNode_PopulateTiXmlElement(self, Element, OutputType)

    def Rotate(self, *args):
        return _Core.CNode_Rotate(self, *args)

    def Translate(self, Vector):
        return _Core.CNode_Translate(self, Vector)

    def ProjectUp(self):
        return _Core.CNode_ProjectUp(self)

    def GetSide(self):
        return _Core.CNode_GetSide(self)

    def GetPosition(self):
        return _Core.CNode_GetPosition(self)

    def GetTangent(self):
        return _Core.CNode_GetTangent(self)

    def GetUp(self):
        return _Core.CNode_GetUp(self)

    def GetAngle(self):
        return _Core.CNode_GetAngle(self)

    def GetNormal(self):
        return _Core.CNode_GetNormal(self)

    def SetPosition(self, Position):
        return _Core.CNode_SetPosition(self, Position)

    def SetTangent(self, Tangent):
        return _Core.CNode_SetTangent(self, Tangent)

    def SetUp(self, Up):
        return _Core.CNode_SetUp(self, Up)

    def SetAngle(self, Angle):
        return _Core.CNode_SetAngle(self, Angle)

    def __init__(self, *args):
        _Core.CNode_swiginit(self, _Core.new_CNode(*args))

# Register CNode in _Core:
_Core.CNode_swigregister(CNode)

class CSlaveNode(CNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSlaveNode

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSlaveNode_PopulateTiXmlElement(self, Element, OutputType)

    def UpdateSectionPoints(self, p2DSectionPoints=None):
        return _Core.CSlaveNode_UpdateSectionPoints(self, p2DSectionPoints)

    def GetPointOnSection(self, p2DSectionPoints):
        return _Core.CSlaveNode_GetPointOnSection(self, p2DSectionPoints)

    def UpdateSectionMesh(self, p2DSectionMesh=None):
        return _Core.CSlaveNode_UpdateSectionMesh(self, p2DSectionMesh)

    def Rotate(self, Rotation):
        return _Core.CSlaveNode_Rotate(self, Rotation)

    def Translate(self, Vector):
        return _Core.CSlaveNode_Translate(self, Vector)

    def GetT(self):
        return _Core.CSlaveNode_GetT(self)

    def SetT(self, t):
        return _Core.CSlaveNode_SetT(self, t)

    def GetIndex(self):
        return _Core.CSlaveNode_GetIndex(self)

    def SetIndex(self, iIndex):
        return _Core.CSlaveNode_SetIndex(self, iIndex)

    def GetSectionPoints(self):
        return _Core.CSlaveNode_GetSectionPoints(self)

    def Get2DSectionPoints(self):
        return _Core.CSlaveNode_Get2DSectionPoints(self)

    def Get2DSectionMesh(self):
        return _Core.CSlaveNode_Get2DSectionMesh(self)

    def GetSectionMesh(self):
        return _Core.CSlaveNode_GetSectionMesh(self)

    def __lt__(self, right):
        return _Core.CSlaveNode___lt__(self, right)

    def __init__(self, *args):
        _Core.CSlaveNode_swiginit(self, _Core.new_CSlaveNode(*args))

# Register CSlaveNode in _Core:
_Core.CSlaveNode_swigregister(CSlaveNode)

class CTexGen(TexGenSingleton):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTexGen

    def GetName(self, pTextile):
        return _Core.CTexGen_GetName(self, pTextile)

    def GetTextile(self, *args):
        return _Core.CTexGen_GetTextile(self, *args)

    def AddTextile(self, *args):
        return _Core.CTexGen_AddTextile(self, *args)

    def DeleteTextile(self, TextileName):
        return _Core.CTexGen_DeleteTextile(self, TextileName)

    def PopulateTiXmlElement(self, *args):
        return _Core.CTexGen_PopulateTiXmlElement(self, *args)

    def LoadTiXmlElement(self, Element):
        return _Core.CTexGen_LoadTiXmlElement(self, Element)

    def SaveToXML(self, *args):
        return _Core.CTexGen_SaveToXML(self, *args)

    def ReadFromXML(self, FileName):
        return _Core.CTexGen_ReadFromXML(self, FileName)

    def DeleteTextiles(self):
        return _Core.CTexGen_DeleteTextiles(self)

    def SetLogger(self, Logger):
        return _Core.CTexGen_SetLogger(self, Logger)

    def SetTextileCallback(self, pTextileCallback):
        return _Core.CTexGen_SetTextileCallback(self, pTextileCallback)

    def GetVersion(self):
        return _Core.CTexGen_GetVersion(self)

    def SetMessages(self, *args):
        return _Core.CTexGen_SetMessages(self, *args)

    def GetMessagesOn(self):
        return _Core.CTexGen_GetMessagesOn(self)

    def GetTextileNames(self, Names):
        return _Core.CTexGen_GetTextileNames(self, Names)

    def GetTextiles(self):
        return _Core.CTexGen_GetTextiles(self)

    def GetLogger(self):
        return _Core.CTexGen_GetLogger(self)

    def __init__(self, *args):
        _Core.CTexGen_swiginit(self, _Core.new_CTexGen(*args))

# Register CTexGen in _Core:
_Core.CTexGen_swigregister(CTexGen)

class CYarn(CPropertiesYarn):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CYarn
    NONE = _Core.CYarn_NONE
    LINE = _Core.CYarn_LINE
    SURFACE = _Core.CYarn_SURFACE
    VOLUME = _Core.CYarn_VOLUME
    ALL = _Core.CYarn_ALL
    CENTRE_PLANE = _Core.CYarn_CENTRE_PLANE

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CYarn_PopulateTiXmlElement(self, Element, OutputType)

    def AddNode(self, Node):
        return _Core.CYarn_AddNode(self, Node)

    def InsertNode(self, *args):
        return _Core.CYarn_InsertNode(self, *args)

    def ReplaceNode(self, iIndex, NewNode):
        return _Core.CYarn_ReplaceNode(self, iIndex, NewNode)

    def DeleteNode(self, iIndex):
        return _Core.CYarn_DeleteNode(self, iIndex)

    def GetNode(self, iIndex):
        return _Core.CYarn_GetNode(self, iIndex)

    def SetNodes(self, Nodes):
        return _Core.CYarn_SetNodes(self, Nodes)

    def AssignInterpolation(self, Interpolation):
        return _Core.CYarn_AssignInterpolation(self, Interpolation)

    def AssignFibreDistribution(self, Distribution):
        return _Core.CYarn_AssignFibreDistribution(self, Distribution)

    def SetResolution(self, *args):
        return _Core.CYarn_SetResolution(self, *args)

    def SetEquiSpacedSectionMesh(self, bEquiSpacedSectionMesh):
        return _Core.CYarn_SetEquiSpacedSectionMesh(self, bEquiSpacedSectionMesh)

    def AssignSection(self, YarnSection):
        return _Core.CYarn_AssignSection(self, YarnSection)

    def Rotate(self, *args):
        return _Core.CYarn_Rotate(self, *args)

    def Translate(self, Vector):
        return _Core.CYarn_Translate(self, Vector)

    def AddAABBToMesh(self, *args):
        return _Core.CYarn_AddAABBToMesh(self, *args)

    def AddNodesToMesh(self, Mesh):
        return _Core.CYarn_AddNodesToMesh(self, Mesh)

    def AddPathToMesh(self, Mesh):
        return _Core.CYarn_AddPathToMesh(self, Mesh)

    def AddSurfaceToMesh(self, *args):
        return _Core.CYarn_AddSurfaceToMesh(self, *args)

    def AddVolumeToMesh(self, *args):
        return _Core.CYarn_AddVolumeToMesh(self, *args)

    def AddCentrePlaneToMesh(self, *args):
        return _Core.CYarn_AddCentrePlaneToMesh(self, *args)

    def AddRepeat(self, Repeat):
        return _Core.CYarn_AddRepeat(self, Repeat)

    def ClearRepeats(self):
        return _Core.CYarn_ClearRepeats(self)

    def SetRepeats(self, Repeats):
        return _Core.CYarn_SetRepeats(self, Repeats)

    def RepeatMatchesEnds(self, Repeat):
        return _Core.CYarn_RepeatMatchesEnds(self, Repeat)

    def ClearMasterNodeOrientations(self):
        return _Core.CYarn_ClearMasterNodeOrientations(self)

    def PointInsideYarn(self, *args):
        return _Core.CYarn_PointInsideYarn(self, *args)

    def FindPlaneContainingPoint(self, Point, u, dTolerance, iSeg):
        return _Core.CYarn_FindPlaneContainingPoint(self, Point, u, dTolerance, iSeg)

    def FindClosestSurfacePoint(self, *args):
        return _Core.CYarn_FindClosestSurfacePoint(self, *args)

    def StraightenYarn(self, dStraightness=1):
        return _Core.CYarn_StraightenYarn(self, dStraightness)

    def GetAABB(self):
        return _Core.CYarn_GetAABB(self)

    def GetSectionAABB(self, iIndex):
        return _Core.CYarn_GetSectionAABB(self, iIndex)

    def GetRawYarnLength(self):
        return _Core.CYarn_GetRawYarnLength(self)

    def GetRawYarnSectionLength(self, iIndex):
        return _Core.CYarn_GetRawYarnSectionLength(self, iIndex)

    def GetRawYarnVolume(self):
        return _Core.CYarn_GetRawYarnVolume(self)

    def GetRawRepeatArea(self):
        return _Core.CYarn_GetRawRepeatArea(self)

    def GetYarnSectionLengths(self):
        return _Core.CYarn_GetYarnSectionLengths(self)

    def GetSlaveNodes(self, Usage):
        return _Core.CYarn_GetSlaveNodes(self, Usage)

    def GetRealYarnLength(self, *args):
        return _Core.CYarn_GetRealYarnLength(self, *args)

    def GetYarnLengthPerUnitArea(self, *args):
        return _Core.CYarn_GetYarnLengthPerUnitArea(self, *args)

    def GetRealYarnVolume(self, *args):
        return _Core.CYarn_GetRealYarnVolume(self, *args)

    def GetYarnVolumePerUnitArea(self, *args):
        return _Core.CYarn_GetYarnVolumePerUnitArea(self, *args)

    def GetFibreVolume(self, *args):
        return _Core.CYarn_GetFibreVolume(self, *args)

    def GetFibreVolumePerUnitArea(self, *args):
        return _Core.CYarn_GetFibreVolumePerUnitArea(self, *args)

    def GetFibreYarnVolumeFraction(self):
        return _Core.CYarn_GetFibreYarnVolumeFraction(self)

    def GetNumSectionPoints(self):
        return _Core.CYarn_GetNumSectionPoints(self)

    def GetNumSlaveNodes(self):
        return _Core.CYarn_GetNumSlaveNodes(self)

    def ConvertToInterpNodes(self):
        return _Core.CYarn_ConvertToInterpNodes(self)

    def GetMasterNodes(self):
        return _Core.CYarn_GetMasterNodes(self)

    def GetRepeats(self):
        return _Core.CYarn_GetRepeats(self)

    def GetYarnSection(self):
        return _Core.CYarn_GetYarnSection(self)

    def GetInterpolation(self):
        return _Core.CYarn_GetInterpolation(self)

    def GetFibreDistribution(self):
        return _Core.CYarn_GetFibreDistribution(self)

    def GetNumNodes(self):
        return _Core.CYarn_GetNumNodes(self)

    def GetSectionLengths(self):
        return _Core.CYarn_GetSectionLengths(self)

    def GetMeshPoint(self, Mesh, Point, Index):
        return _Core.CYarn_GetMeshPoint(self, Mesh, Point, Index)

    def __init__(self, *args):
        _Core.CYarn_swiginit(self, _Core.new_CYarn(*args))

# Register CYarn in _Core:
_Core.CYarn_swigregister(CYarn)

class LessPairDoubleInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, x, y):
        return _Core.LessPairDoubleInt___call__(self, x, y)

    def __init__(self, *args):
        _Core.LessPairDoubleInt_swiginit(self, _Core.new_LessPairDoubleInt(*args))
    __swig_destroy__ = _Core.delete_LessPairDoubleInt

# Register LessPairDoubleInt in _Core:
_Core.LessPairDoubleInt_swigregister(LessPairDoubleInt)

class LessPairDoubleXYZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, x, y):
        return _Core.LessPairDoubleXYZ___call__(self, x, y)

    def __init__(self, *args):
        _Core.LessPairDoubleXYZ_swiginit(self, _Core.new_LessPairDoubleXYZ(*args))
    __swig_destroy__ = _Core.delete_LessPairDoubleXYZ

# Register LessPairDoubleXYZ in _Core:
_Core.LessPairDoubleXYZ_swigregister(LessPairDoubleXYZ)

class COLOR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_Core.COLOR_r_get, _Core.COLOR_r_set)
    g = property(_Core.COLOR_g_get, _Core.COLOR_g_set)
    b = property(_Core.COLOR_b_get, _Core.COLOR_b_set)

    def Array(self):
        return _Core.COLOR_Array(self)

    def __init__(self, *args):
        _Core.COLOR_swiginit(self, _Core.new_COLOR(*args))
    __swig_destroy__ = _Core.delete_COLOR

# Register COLOR in _Core:
_Core.COLOR_swigregister(COLOR)

OUTPUT_MINIMAL = _Core.OUTPUT_MINIMAL
OUTPUT_STANDARD = _Core.OUTPUT_STANDARD
OUTPUT_FULL = _Core.OUTPUT_FULL
INP_EXPORT = _Core.INP_EXPORT
VTU_EXPORT = _Core.VTU_EXPORT
SCIRUN_EXPORT = _Core.SCIRUN_EXPORT
BOX_DOMAIN = _Core.BOX_DOMAIN
SHEARED_DOMAIN = _Core.SHEARED_DOMAIN
ROTATED_DOMAIN = _Core.ROTATED_DOMAIN

def GetIndexedColor(iIndex):
    return _Core.GetIndexedColor(iIndex)

def CopyToRange(Offsets, Vector, iLowerLimit, iUpperLimit):
    return _Core.CopyToRange(Offsets, Vector, iLowerLimit, iUpperLimit)

def ConvertUnits(dValue, SourceUnits, TargetUnits):
    return _Core.ConvertUnits(dValue, SourceUnits, TargetUnits)

def CompatibleUnits(SourceUnits, TargetUnits, pErrorMessage=None):
    return _Core.CompatibleUnits(SourceUnits, TargetUnits, pErrorMessage)

def ReduceUnits(Units):
    return _Core.ReduceUnits(Units)

def AddNewUnits(NewUnit, BaseUnits):
    return _Core.AddNewUnits(NewUnit, BaseUnits)

def StripPath(Filename):
    return _Core.StripPath(Filename)

def AddExtensionIfMissing(Filename, Extension):
    return _Core.AddExtensionIfMissing(Filename, Extension)

def ReplaceFilenameSpaces(Filename):
    return _Core.ReplaceFilenameSpaces(Filename)

def RemoveExtension(Filename, Extension):
    return _Core.RemoveExtension(Filename, Extension)

def WriteOrientationsHeader(Output):
    return _Core.WriteOrientationsHeader(Output)

def WriteElementsHeader(Output):
    return _Core.WriteElementsHeader(Output)
class POINT_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iYarnIndex = property(_Core.POINT_INFO_iYarnIndex_get, _Core.POINT_INFO_iYarnIndex_set)
    YarnTangent = property(_Core.POINT_INFO_YarnTangent_get, _Core.POINT_INFO_YarnTangent_set)
    Location = property(_Core.POINT_INFO_Location_get, _Core.POINT_INFO_Location_set)
    dVolumeFraction = property(_Core.POINT_INFO_dVolumeFraction_get, _Core.POINT_INFO_dVolumeFraction_set)
    dSurfaceDistance = property(_Core.POINT_INFO_dSurfaceDistance_get, _Core.POINT_INFO_dSurfaceDistance_set)
    Orientation = property(_Core.POINT_INFO_Orientation_get, _Core.POINT_INFO_Orientation_set)
    Up = property(_Core.POINT_INFO_Up_get, _Core.POINT_INFO_Up_set)

    def __init__(self, *args):
        _Core.POINT_INFO_swiginit(self, _Core.new_POINT_INFO(*args))
    __swig_destroy__ = _Core.delete_POINT_INFO

# Register POINT_INFO in _Core:
_Core.POINT_INFO_swigregister(POINT_INFO)

class MESHER_ELEMENT_DATA(POINT_INFO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iLayer = property(_Core.MESHER_ELEMENT_DATA_iLayer_get, _Core.MESHER_ELEMENT_DATA_iLayer_set)
    iRegion = property(_Core.MESHER_ELEMENT_DATA_iRegion_get, _Core.MESHER_ELEMENT_DATA_iRegion_set)

    def __init__(self, *args):
        _Core.MESHER_ELEMENT_DATA_swiginit(self, _Core.new_MESHER_ELEMENT_DATA(*args))
    __swig_destroy__ = _Core.delete_MESHER_ELEMENT_DATA

# Register MESHER_ELEMENT_DATA in _Core:
_Core.MESHER_ELEMENT_DATA_swigregister(MESHER_ELEMENT_DATA)


def GetMinMaxXY(Points, Min, Max):
    return _Core.GetMinMaxXY(Points, Min, Max)
MATERIAL_CONTINUUM = _Core.MATERIAL_CONTINUUM
SINGLE_LAYER_RVE = _Core.SINGLE_LAYER_RVE
STAGGERED_BC = _Core.STAGGERED_BC
SHEARED_BC = _Core.SHEARED_BC
ROTATED_BC = _Core.ROTATED_BC
NO_BOUNDARY_CONDITIONS = _Core.NO_BOUNDARY_CONDITIONS
class CTextile(CPropertiesTextile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.CTextile_swiginit(self, _Core.new_CTextile(*args))
    __swig_destroy__ = _Core.delete_CTextile

    def Copy(self):
        return _Core.CTextile_Copy(self)

    def GetType(self):
        return _Core.CTextile_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextile_PopulateTiXmlElement(self, Element, OutputType)

    def AddYarn(self, Yarn):
        return _Core.CTextile_AddYarn(self, Yarn)

    def DeleteYarn(self, iIndex):
        return _Core.CTextile_DeleteYarn(self, iIndex)

    def DeleteYarns(self):
        return _Core.CTextile_DeleteYarns(self)

    def AddNodesToMesh(self, Mesh):
        return _Core.CTextile_AddNodesToMesh(self, Mesh)

    def AddPathToMesh(self, Mesh):
        return _Core.CTextile_AddPathToMesh(self, Mesh)

    def AddSurfaceToMesh(self, *args):
        return _Core.CTextile_AddSurfaceToMesh(self, *args)

    def AddVolumeToMesh(self, Mesh, bTrimToDomain=False):
        return _Core.CTextile_AddVolumeToMesh(self, Mesh, bTrimToDomain)

    def AddCentrePlaneToMesh(self, Mesh, bTrimToDomain=False):
        return _Core.CTextile_AddCentrePlaneToMesh(self, Mesh, bTrimToDomain)

    def GetPointInformation(self, *args):
        return _Core.CTextile_GetPointInformation(self, *args)

    def SavePointInformationToVTK(self, Filename, Mesh, dTolerance=1e-9):
        return _Core.CTextile_SavePointInformationToVTK(self, Filename, Mesh, dTolerance)

    def GetApproximateSize(self):
        return _Core.CTextile_GetApproximateSize(self)

    def DetectInterference(self, DistanceToSurface, YarnIndex, bTrimToDomain, pInterferingPoints=None):
        return _Core.CTextile_DetectInterference(self, DistanceToSurface, YarnIndex, bTrimToDomain, pInterferingPoints)

    def Rotate(self, *args):
        return _Core.CTextile_Rotate(self, *args)

    def Translate(self, Vector):
        return _Core.CTextile_Translate(self, Vector)

    def GetDefaultName(self):
        return _Core.CTextile_GetDefaultName(self)

    def GetName(self):
        return _Core.CTextile_GetName(self)

    def AssignDomain(self, Domain):
        return _Core.CTextile_AssignDomain(self, Domain)

    def RemoveDomain(self):
        return _Core.CTextile_RemoveDomain(self)

    def SetResolution(self, Resolution):
        return _Core.CTextile_SetResolution(self, Resolution)

    def GetYarnLength(self, *args):
        return _Core.CTextile_GetYarnLength(self, *args)

    def GetYarnLengthPerUnitArea(self, *args):
        return _Core.CTextile_GetYarnLengthPerUnitArea(self, *args)

    def GetYarnVolume(self, *args):
        return _Core.CTextile_GetYarnVolume(self, *args)

    def GetYarnVolumePerUnitArea(self, *args):
        return _Core.CTextile_GetYarnVolumePerUnitArea(self, *args)

    def GetFibreVolume(self, *args):
        return _Core.CTextile_GetFibreVolume(self, *args)

    def GetFibreVolumePerUnitArea(self, *args):
        return _Core.CTextile_GetFibreVolumePerUnitArea(self, *args)

    def GetFibreYarnVolumeFraction(self):
        return _Core.CTextile_GetFibreYarnVolumeFraction(self)

    def GetQuickDomainVolumeFraction(self):
        return _Core.CTextile_GetQuickDomainVolumeFraction(self)

    def GetDomainVolumeFraction(self):
        return _Core.CTextile_GetDomainVolumeFraction(self)

    def SetAllYarnsYoungsModulusX(self, *args):
        return _Core.CTextile_SetAllYarnsYoungsModulusX(self, *args)

    def SetAllYarnsYoungsModulusY(self, *args):
        return _Core.CTextile_SetAllYarnsYoungsModulusY(self, *args)

    def SetAllYarnsYoungsModulusZ(self, *args):
        return _Core.CTextile_SetAllYarnsYoungsModulusZ(self, *args)

    def SetAllYarnsShearModulusXY(self, *args):
        return _Core.CTextile_SetAllYarnsShearModulusXY(self, *args)

    def SetAllYarnsShearModulusXZ(self, *args):
        return _Core.CTextile_SetAllYarnsShearModulusXZ(self, *args)

    def SetAllYarnsShearModulusYZ(self, *args):
        return _Core.CTextile_SetAllYarnsShearModulusYZ(self, *args)

    def SetAllYarnsAlphaX(self, *args):
        return _Core.CTextile_SetAllYarnsAlphaX(self, *args)

    def SetAllYarnsAlphaY(self, *args):
        return _Core.CTextile_SetAllYarnsAlphaY(self, *args)

    def SetAllYarnsAlphaZ(self, *args):
        return _Core.CTextile_SetAllYarnsAlphaZ(self, *args)

    def SetAllYarnsPoissonsRatioX(self, dValue):
        return _Core.CTextile_SetAllYarnsPoissonsRatioX(self, dValue)

    def SetAllYarnsPoissonsRatioY(self, dValue):
        return _Core.CTextile_SetAllYarnsPoissonsRatioY(self, dValue)

    def SetAllYarnsPoissonsRatioZ(self, dValue):
        return _Core.CTextile_SetAllYarnsPoissonsRatioZ(self, dValue)

    def ConvertToInterpNodes(self):
        return _Core.CTextile_ConvertToInterpNodes(self)

    def GetWeave(self):
        return _Core.CTextile_GetWeave(self)

    def GetWeave2D(self):
        return _Core.CTextile_GetWeave2D(self)

    def Get3DWeave(self):
        return _Core.CTextile_Get3DWeave(self)

    def GetOrthogonalWeave(self):
        return _Core.CTextile_GetOrthogonalWeave(self)

    def GetLayeredTextile(self):
        return _Core.CTextile_GetLayeredTextile(self)

    def GetLayerToLayerWeave(self):
        return _Core.CTextile_GetLayerToLayerWeave(self)

    def GetAngleInterlockWeave(self):
        return _Core.CTextile_GetAngleInterlockWeave(self)

    def GetNumYarns(self):
        return _Core.CTextile_GetNumYarns(self)

    def GetYarn(self, *args):
        return _Core.CTextile_GetYarn(self, *args)

    def GetYarns(self, *args):
        return _Core.CTextile_GetYarns(self, *args)

    def GetDomain(self, *args):
        return _Core.CTextile_GetDomain(self, *args)

# Register CTextile in _Core:
_Core.CTextile_swigregister(CTextile)

PATTERN_XYARN = _Core.PATTERN_XYARN
PATTERN_YYARN = _Core.PATTERN_YYARN
class CTextileWeave(CTextile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileWeave

    def Copy(self):
        return _Core.CTextileWeave_Copy(self)

    def GetType(self):
        return _Core.CTextileWeave_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileWeave_PopulateTiXmlElement(self, Element, OutputType)

    def SetThickness(self, dThickness, bAdjustYarnHeights=True):
        return _Core.CTextileWeave_SetThickness(self, dThickness, bAdjustYarnHeights)

    def GetXYarnWidths(self, iIndex):
        return _Core.CTextileWeave_GetXYarnWidths(self, iIndex)

    def GetYYarnWidths(self, iIndex):
        return _Core.CTextileWeave_GetYYarnWidths(self, iIndex)

    def GetXYarnHeights(self, iIndex):
        return _Core.CTextileWeave_GetXYarnHeights(self, iIndex)

    def GetYYarnHeights(self, iIndex):
        return _Core.CTextileWeave_GetYYarnHeights(self, iIndex)

    def GetXYarnSpacings(self, iIndex):
        return _Core.CTextileWeave_GetXYarnSpacings(self, iIndex)

    def GetYYarnSpacings(self, iIndex):
        return _Core.CTextileWeave_GetYYarnSpacings(self, iIndex)

    def GetXYarnGapSize(self, iIndex):
        return _Core.CTextileWeave_GetXYarnGapSize(self, iIndex)

    def GetYYarnGapSize(self, iIndex):
        return _Core.CTextileWeave_GetYYarnGapSize(self, iIndex)

    def SetXYarnWidths(self, *args):
        return _Core.CTextileWeave_SetXYarnWidths(self, *args)

    def SetYYarnWidths(self, *args):
        return _Core.CTextileWeave_SetYYarnWidths(self, *args)

    def SetXYarnHeights(self, *args):
        return _Core.CTextileWeave_SetXYarnHeights(self, *args)

    def SetYYarnHeights(self, *args):
        return _Core.CTextileWeave_SetYYarnHeights(self, *args)

    def SetXYarnSpacings(self, *args):
        return _Core.CTextileWeave_SetXYarnSpacings(self, *args)

    def SetYYarnSpacings(self, *args):
        return _Core.CTextileWeave_SetYYarnSpacings(self, *args)

    def SetYarnWidths(self, dWidth):
        return _Core.CTextileWeave_SetYarnWidths(self, dWidth)

    def SetYarnHeights(self, dHeight):
        return _Core.CTextileWeave_SetYarnHeights(self, dHeight)

    def SetYarnSpacings(self, dSpacing):
        return _Core.CTextileWeave_SetYarnSpacings(self, dSpacing)

    def SetGapSize(self, dGapSize):
        return _Core.CTextileWeave_SetGapSize(self, dGapSize)

    def SetResolution(self, iResolution):
        return _Core.CTextileWeave_SetResolution(self, iResolution)

    def AssignSectionMesh(self, SectionMesh):
        return _Core.CTextileWeave_AssignSectionMesh(self, SectionMesh)

    def GetDefaultDomain(self, bSheared=False, bAddedHeight=True):
        return _Core.CTextileWeave_GetDefaultDomain(self, bSheared, bAddedHeight)

    def AssignDefaultDomain(self, bSheared=False, bAddedHeight=True):
        return _Core.CTextileWeave_AssignDefaultDomain(self, bSheared, bAddedHeight)

    def FlattenYarns(self, dFlatLevel, iUpDownBoth=0):
        return _Core.CTextileWeave_FlattenYarns(self, dFlatLevel, iUpDownBoth)

    def GetDefaultName(self):
        return _Core.CTextileWeave_GetDefaultName(self)

    def RefineTextile(self, bCorrectWidths=True, bCorrectInterference=True, bPeriodic=True):
        return _Core.CTextileWeave_RefineTextile(self, bCorrectWidths, bCorrectInterference, bPeriodic)

    def CorrectEdgeInterference(self):
        return _Core.CTextileWeave_CorrectEdgeInterference(self)

    def ConvertToPatternDraft(self):
        return _Core.CTextileWeave_ConvertToPatternDraft(self)

    def GetWidth(self):
        return _Core.CTextileWeave_GetWidth(self)

    def GetHeight(self):
        return _Core.CTextileWeave_GetHeight(self)

    def GetNumXYarns(self):
        return _Core.CTextileWeave_GetNumXYarns(self)

    def GetNumYYarns(self):
        return _Core.CTextileWeave_GetNumYYarns(self)

    def GetFabricThickness(self):
        return _Core.CTextileWeave_GetFabricThickness(self)

    def GetGapSize(self):
        return _Core.CTextileWeave_GetGapSize(self)

    def GetAverageYarnSpacing(self):
        return _Core.CTextileWeave_GetAverageYarnSpacing(self)

    def GetAverageYarnWidth(self):
        return _Core.CTextileWeave_GetAverageYarnWidth(self)

    def GetCell(self, x, y):
        return _Core.CTextileWeave_GetCell(self, x, y)

    def GetResolution(self):
        return _Core.CTextileWeave_GetResolution(self)

    def GetXYarns(self, iIndex):
        return _Core.CTextileWeave_GetXYarns(self, iIndex)

    def GetYYarns(self, iIndex):
        return _Core.CTextileWeave_GetYYarns(self, iIndex)

    def GetYarnIndex(self, x, y, z):
        return _Core.CTextileWeave_GetYarnIndex(self, x, y, z)

    def GetPatternDraft(self):
        return _Core.CTextileWeave_GetPatternDraft(self)

    def __init__(self, *args):
        _Core.CTextileWeave_swiginit(self, _Core.new_CTextileWeave(*args))

# Register CTextileWeave in _Core:
_Core.CTextileWeave_swigregister(CTextileWeave)

class CTextileWeave2D(CTextileWeave):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileWeave2D

    def Copy(self):
        return _Core.CTextileWeave2D_Copy(self)

    def GetType(self):
        return _Core.CTextileWeave2D_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileWeave2D_PopulateTiXmlElement(self, Element, OutputType)

    def GetDefaultName(self):
        return _Core.CTextileWeave2D_GetDefaultName(self)

    def SwapPosition(self, x, y):
        return _Core.CTextileWeave2D_SwapPosition(self, x, y)

    def SwapAll(self):
        return _Core.CTextileWeave2D_SwapAll(self)

    def GetRefine(self):
        return _Core.CTextileWeave2D_GetRefine(self)

    def GetInPlaneTangents(self):
        return _Core.CTextileWeave2D_GetInPlaneTangents(self)

    def RefineTextile(self, bCorrectWidths=True, bCorrectInterference=True, bPeriodic=True):
        return _Core.CTextileWeave2D_RefineTextile(self, bCorrectWidths, bCorrectInterference, bPeriodic)

    def GetDefaultDomain(self, bSheared=False, bAddedDomainHeight=True):
        return _Core.CTextileWeave2D_GetDefaultDomain(self, bSheared, bAddedDomainHeight)

    def ConvertToPatternDraft(self):
        return _Core.CTextileWeave2D_ConvertToPatternDraft(self)

    def SetInPlaneTangents(self, bInPlaneTangents=True):
        return _Core.CTextileWeave2D_SetInPlaneTangents(self, bInPlaneTangents)

    def __init__(self, *args):
        _Core.CTextileWeave2D_swiginit(self, _Core.new_CTextileWeave2D(*args))

# Register CTextileWeave2D in _Core:
_Core.CTextileWeave2D_swigregister(CTextileWeave2D)

class CTextileWeave3D(CTextileWeave):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileWeave3D

    def Copy(self):
        return _Core.CTextileWeave3D_Copy(self)

    def GetType(self):
        return _Core.CTextileWeave3D_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileWeave3D_PopulateTiXmlElement(self, Element, OutputType)

    def AddYLayers(self, *args):
        return _Core.CTextileWeave3D_AddYLayers(self, *args)

    def AddXLayers(self, *args):
        return _Core.CTextileWeave3D_AddXLayers(self, *args)

    def DeleteYLayers(self, *args):
        return _Core.CTextileWeave3D_DeleteYLayers(self, *args)

    def DeleteXLayers(self, *args):
        return _Core.CTextileWeave3D_DeleteXLayers(self, *args)

    def PushDown(self, x, y, iLevels=1):
        return _Core.CTextileWeave3D_PushDown(self, x, y, iLevels)

    def PushUp(self, x, y, iLevels=1):
        return _Core.CTextileWeave3D_PushUp(self, x, y, iLevels)

    def PushYDown(self, x, iLevels=1):
        return _Core.CTextileWeave3D_PushYDown(self, x, iLevels)

    def PushYUp(self, x, iLevels=1):
        return _Core.CTextileWeave3D_PushYUp(self, x, iLevels)

    def PushXDown(self, y, iLevels=1):
        return _Core.CTextileWeave3D_PushXDown(self, y, iLevels)

    def PushXUp(self, y, iLevels=1):
        return _Core.CTextileWeave3D_PushXUp(self, y, iLevels)

    def SwapPosition(self, x, y, iLevel1, iLevel2):
        return _Core.CTextileWeave3D_SwapPosition(self, x, y, iLevel1, iLevel2)

    def GetNumYLayers(self, x):
        return _Core.CTextileWeave3D_GetNumYLayers(self, x)

    def GetNumXLayers(self, y):
        return _Core.CTextileWeave3D_GetNumXLayers(self, y)

    def GetMaxNumLayers(self):
        return _Core.CTextileWeave3D_GetMaxNumLayers(self)

    def GetDefaultName(self):
        return _Core.CTextileWeave3D_GetDefaultName(self)

    def __init__(self, *args):
        _Core.CTextileWeave3D_swiginit(self, _Core.new_CTextileWeave3D(*args))

# Register CTextileWeave3D in _Core:
_Core.CTextileWeave3D_swigregister(CTextileWeave3D)

PATTERN3D_YYARN = _Core.PATTERN3D_YYARN
PATTERN3D_XYARN = _Core.PATTERN3D_XYARN
PATTERN3D_NOYARN = _Core.PATTERN3D_NOYARN
WARP = _Core.WARP
BINDER = _Core.BINDER
WEFT = _Core.WEFT
BOTTOM_TO_TOP = _Core.BOTTOM_TO_TOP
TOP_TO_BOTTOM = _Core.TOP_TO_BOTTOM
ALTERNATE_WEFT_STACK = _Core.ALTERNATE_WEFT_STACK
class YARNDATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dWidth = property(_Core.YARNDATA_dWidth_get, _Core.YARNDATA_dWidth_set)
    dHeight = property(_Core.YARNDATA_dHeight_get, _Core.YARNDATA_dHeight_set)
    dSpacing = property(_Core.YARNDATA_dSpacing_get, _Core.YARNDATA_dSpacing_set)

    def __init__(self, *args):
        _Core.YARNDATA_swiginit(self, _Core.new_YARNDATA(*args))
    __swig_destroy__ = _Core.delete_YARNDATA

# Register YARNDATA in _Core:
_Core.YARNDATA_swigregister(YARNDATA)

class CTextile3DWeave(CTextile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextile3DWeave

    def Copy(self):
        return _Core.CTextile3DWeave_Copy(self)

    def GetType(self):
        return _Core.CTextile3DWeave_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextile3DWeave_PopulateTiXmlElement(self, Element, OutputType)

    def SetThickness(self, dThickness):
        return _Core.CTextile3DWeave_SetThickness(self, dThickness)

    def SetMaxVolFraction(self, dVolFraction):
        return _Core.CTextile3DWeave_SetMaxVolFraction(self, dVolFraction)

    def GetXYarnWidths(self, iIndex):
        return _Core.CTextile3DWeave_GetXYarnWidths(self, iIndex)

    def GetYYarnWidths(self, iIndex):
        return _Core.CTextile3DWeave_GetYYarnWidths(self, iIndex)

    def GetXYarnHeights(self, iIndex):
        return _Core.CTextile3DWeave_GetXYarnHeights(self, iIndex)

    def GetYYarnHeights(self, iIndex):
        return _Core.CTextile3DWeave_GetYYarnHeights(self, iIndex)

    def GetXYarnSpacings(self, iIndex):
        return _Core.CTextile3DWeave_GetXYarnSpacings(self, iIndex)

    def GetYYarnSpacings(self, iIndex):
        return _Core.CTextile3DWeave_GetYYarnSpacings(self, iIndex)

    def GetXYarnGapSize(self, iIndex):
        return _Core.CTextile3DWeave_GetXYarnGapSize(self, iIndex)

    def GetYYarnGapSize(self, iIndex):
        return _Core.CTextile3DWeave_GetYYarnGapSize(self, iIndex)

    def SetXYarnWidths(self, *args):
        return _Core.CTextile3DWeave_SetXYarnWidths(self, *args)

    def SetYYarnWidths(self, *args):
        return _Core.CTextile3DWeave_SetYYarnWidths(self, *args)

    def SetWarpYarnWidths(self, dWidth):
        return _Core.CTextile3DWeave_SetWarpYarnWidths(self, dWidth)

    def SetBinderYarnWidths(self, dWidth):
        return _Core.CTextile3DWeave_SetBinderYarnWidths(self, dWidth)

    def SetXYarnHeights(self, *args):
        return _Core.CTextile3DWeave_SetXYarnHeights(self, *args)

    def SetYYarnHeights(self, *args):
        return _Core.CTextile3DWeave_SetYYarnHeights(self, *args)

    def SetWarpYarnHeights(self, dHeight):
        return _Core.CTextile3DWeave_SetWarpYarnHeights(self, dHeight)

    def SetBinderYarnHeights(self, dHeight):
        return _Core.CTextile3DWeave_SetBinderYarnHeights(self, dHeight)

    def SetXYarnSpacings(self, *args):
        return _Core.CTextile3DWeave_SetXYarnSpacings(self, *args)

    def SetYYarnSpacings(self, *args):
        return _Core.CTextile3DWeave_SetYYarnSpacings(self, *args)

    def SetWarpYarnSpacings(self, dWidth):
        return _Core.CTextile3DWeave_SetWarpYarnSpacings(self, dWidth)

    def SetBinderYarnSpacings(self, dWidth):
        return _Core.CTextile3DWeave_SetBinderYarnSpacings(self, dWidth)

    def SetWeftYarnPower(self, dPower):
        return _Core.CTextile3DWeave_SetWeftYarnPower(self, dPower)

    def SetWarpYarnPower(self, dPower):
        return _Core.CTextile3DWeave_SetWarpYarnPower(self, dPower)

    def SetBinderYarnPower(self, dPower):
        return _Core.CTextile3DWeave_SetBinderYarnPower(self, dPower)

    def SetYarnLinearDensity(self, *args):
        return _Core.CTextile3DWeave_SetYarnLinearDensity(self, *args)

    def SetFibreDensity(self, *args):
        return _Core.CTextile3DWeave_SetFibreDensity(self, *args)

    def SetFibreArea(self, *args):
        return _Core.CTextile3DWeave_SetFibreArea(self, *args)

    def SetFibresPerYarn(self, iYarnType, iNumFibres):
        return _Core.CTextile3DWeave_SetFibresPerYarn(self, iYarnType, iNumFibres)

    def SetFibreDiameter(self, *args):
        return _Core.CTextile3DWeave_SetFibreDiameter(self, *args)

    def GetFibreArea(self, iYarnType, Units):
        return _Core.CTextile3DWeave_GetFibreArea(self, iYarnType, Units)

    def SetYarnWidths(self, dWidth):
        return _Core.CTextile3DWeave_SetYarnWidths(self, dWidth)

    def SetYarnHeights(self, dHeight):
        return _Core.CTextile3DWeave_SetYarnHeights(self, dHeight)

    def SetYarnSpacings(self, dSpacing):
        return _Core.CTextile3DWeave_SetYarnSpacings(self, dSpacing)

    def AddYLayers(self, *args):
        return _Core.CTextile3DWeave_AddYLayers(self, *args)

    def AddXLayers(self, *args):
        return _Core.CTextile3DWeave_AddXLayers(self, *args)

    def AddXYarn(self, y, Pattern):
        return _Core.CTextile3DWeave_AddXYarn(self, y, Pattern)

    def AddYYarn(self, x, Pattern):
        return _Core.CTextile3DWeave_AddYYarn(self, x, Pattern)

    def AddWarpLayer(self):
        return _Core.CTextile3DWeave_AddWarpLayer(self)

    def AddBinderLayer(self):
        return _Core.CTextile3DWeave_AddBinderLayer(self)

    def AddNoYarnLayer(self):
        return _Core.CTextile3DWeave_AddNoYarnLayer(self)

    def DeleteYLayers(self, *args):
        return _Core.CTextile3DWeave_DeleteYLayers(self, *args)

    def DeleteXLayers(self, *args):
        return _Core.CTextile3DWeave_DeleteXLayers(self, *args)

    def SwapPosition(self, x, y, iLevel1, iLevel2):
        return _Core.CTextile3DWeave_SwapPosition(self, x, y, iLevel1, iLevel2)

    def GetNumYLayers(self, x):
        return _Core.CTextile3DWeave_GetNumYLayers(self, x)

    def GetNumXLayers(self, y):
        return _Core.CTextile3DWeave_GetNumXLayers(self, y)

    def GetMaxNumLayers(self):
        return _Core.CTextile3DWeave_GetMaxNumLayers(self)

    def GetNumBinderLayers(self):
        return _Core.CTextile3DWeave_GetNumBinderLayers(self)

    def GetWarpYarnInfo(self, iNumBinderYarns, iNumWarpYarns, iBinderRatio, iWarpRatio, AveWarp, AveBinder):
        return _Core.CTextile3DWeave_GetWarpYarnInfo(self, iNumBinderYarns, iNumWarpYarns, iBinderRatio, iWarpRatio, AveWarp, AveBinder)

    def IsBinderYarn(self, index):
        return _Core.CTextile3DWeave_IsBinderYarn(self, index)

    def GetXYarnIndex(self, YarnInd):
        return _Core.CTextile3DWeave_GetXYarnIndex(self, YarnInd)

    def FindNextCellIndex(self, index):
        return _Core.CTextile3DWeave_FindNextCellIndex(self, index)

    def FindNextYCellIndex(self, Starti, j, k):
        return _Core.CTextile3DWeave_FindNextYCellIndex(self, Starti, j, k)

    def FindPrevYCellIndex(self, Starti, j, k):
        return _Core.CTextile3DWeave_FindPrevYCellIndex(self, Starti, j, k)

    def SetWarpRatio(self, iWarpRatio):
        return _Core.CTextile3DWeave_SetWarpRatio(self, iWarpRatio)

    def SetBinderRatio(self, iBinderRatio):
        return _Core.CTextile3DWeave_SetBinderRatio(self, iBinderRatio)

    def SetBinderPattern(self, *args):
        return _Core.CTextile3DWeave_SetBinderPattern(self, *args)

    def SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers=1):
        return _Core.CTextile3DWeave_SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers)

    def SetGapSize(self, dGapSize):
        return _Core.CTextile3DWeave_SetGapSize(self, dGapSize)

    def SetResolution(self, iResolution):
        return _Core.CTextile3DWeave_SetResolution(self, iResolution)

    def AssignSectionMesh(self, SectionMesh):
        return _Core.CTextile3DWeave_AssignSectionMesh(self, SectionMesh)

    def GetDefaultDomain(self, bAddedDomainHeight=True):
        return _Core.CTextile3DWeave_GetDefaultDomain(self, bAddedDomainHeight)

    def AssignDefaultDomain(self, bAddedDomainHeight=True):
        return _Core.CTextile3DWeave_AssignDefaultDomain(self, bAddedDomainHeight)

    def SetDomainZValues(self):
        return _Core.CTextile3DWeave_SetDomainZValues(self)

    def FindMinMaxZ(self, dMinZ, dMaxZ):
        return _Core.CTextile3DWeave_FindMinMaxZ(self, dMinZ, dMaxZ)

    def CheckUpVectors(self, *args):
        return _Core.CTextile3DWeave_CheckUpVectors(self, *args)

    def GetDefaultName(self):
        return _Core.CTextile3DWeave_GetDefaultName(self)

    def SetupWeftRow(self, Layers, Row, NumWarps, Weft):
        return _Core.CTextile3DWeave_SetupWeftRow(self, Layers, Row, NumWarps, Weft)

    def ShapeWeftYarns(self):
        return _Core.CTextile3DWeave_ShapeWeftYarns(self)

    def ConvertToPatternDraft(self, *args):
        return _Core.CTextile3DWeave_ConvertToPatternDraft(self, *args)

    def NoYarnCell(self, Cell):
        return _Core.CTextile3DWeave_NoYarnCell(self, Cell)

    def GetWidth(self):
        return _Core.CTextile3DWeave_GetWidth(self)

    def GetHeight(self):
        return _Core.CTextile3DWeave_GetHeight(self)

    def GetNumXYarns(self):
        return _Core.CTextile3DWeave_GetNumXYarns(self)

    def GetNumYYarns(self):
        return _Core.CTextile3DWeave_GetNumYYarns(self)

    def GetFabricThickness(self):
        return _Core.CTextile3DWeave_GetFabricThickness(self)

    def GetMaxVolFraction(self):
        return _Core.CTextile3DWeave_GetMaxVolFraction(self)

    def GetGapSize(self):
        return _Core.CTextile3DWeave_GetGapSize(self)

    def GetAverageYarnSpacing(self):
        return _Core.CTextile3DWeave_GetAverageYarnSpacing(self)

    def GetAverageYarnWidth(self):
        return _Core.CTextile3DWeave_GetAverageYarnWidth(self)

    def GetResolution(self):
        return _Core.CTextile3DWeave_GetResolution(self)

    def GetXYarns(self, iIndex):
        return _Core.CTextile3DWeave_GetXYarns(self, iIndex)

    def GetYYarns(self, iIndex):
        return _Core.CTextile3DWeave_GetYYarns(self, iIndex)

    def GetYarnIndex(self, x, y, z):
        return _Core.CTextile3DWeave_GetYarnIndex(self, x, y, z)

    def GetWarpPower(self):
        return _Core.CTextile3DWeave_GetWarpPower(self)

    def GetWeftPower(self):
        return _Core.CTextile3DWeave_GetWeftPower(self)

    def GetBinderPower(self):
        return _Core.CTextile3DWeave_GetBinderPower(self)

    def GetRefine(self):
        return _Core.CTextile3DWeave_GetRefine(self)

    def GetAverageWeftYarnSpacing(self):
        return _Core.CTextile3DWeave_GetAverageWeftYarnSpacing(self)

    def GetAverageWeftYarnWidth(self):
        return _Core.CTextile3DWeave_GetAverageWeftYarnWidth(self)

    def GetAverageWeftYarnHeight(self):
        return _Core.CTextile3DWeave_GetAverageWeftYarnHeight(self)

    def GetCell(self, *args):
        return _Core.CTextile3DWeave_GetCell(self, *args)

    def SetWeftRepeat(self, WeftRepeat):
        return _Core.CTextile3DWeave_SetWeftRepeat(self, WeftRepeat)

    def GetPatternDraft(self):
        return _Core.CTextile3DWeave_GetPatternDraft(self)

    def CalculateReedDesign(self, Filename):
        return _Core.CTextile3DWeave_CalculateReedDesign(self, Filename)

    def __init__(self, *args):
        _Core.CTextile3DWeave_swiginit(self, _Core.new_CTextile3DWeave(*args))

# Register CTextile3DWeave in _Core:
_Core.CTextile3DWeave_swigregister(CTextile3DWeave)

class CTextileOrthogonal(CTextile3DWeave):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileOrthogonal

    def Copy(self):
        return _Core.CTextileOrthogonal_Copy(self)

    def GetType(self):
        return _Core.CTextileOrthogonal_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileOrthogonal_PopulateTiXmlElement(self, Element, OutputType)

    def SwapBinderPosition(self, x, y):
        return _Core.CTextileOrthogonal_SwapBinderPosition(self, x, y)

    def SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers=1):
        return _Core.CTextileOrthogonal_SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers)

    def BuildTextile(self):
        return _Core.CTextileOrthogonal_BuildTextile(self)

    def ConvertToPatternDraft(self, *args):
        return _Core.CTextileOrthogonal_ConvertToPatternDraft(self, *args)

    def SetupWeftRow(self, Layers, Row, NumWarps, Weft):
        return _Core.CTextileOrthogonal_SetupWeftRow(self, Layers, Row, NumWarps, Weft)

    def ConsolidateCells(self):
        return _Core.CTextileOrthogonal_ConsolidateCells(self)

    def __init__(self, *args):
        _Core.CTextileOrthogonal_swiginit(self, _Core.new_CTextileOrthogonal(*args))

# Register CTextileOrthogonal in _Core:
_Core.CTextileOrthogonal_swigregister(CTextileOrthogonal)

class CTextileAngleInterlock(CTextile3DWeave):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileAngleInterlock

    def Copy(self):
        return _Core.CTextileAngleInterlock_Copy(self)

    def GetType(self):
        return _Core.CTextileAngleInterlock_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileAngleInterlock_PopulateTiXmlElement(self, Element, OutputType)

    def SetBinderYarnPositions(self, x, y):
        return _Core.CTextileAngleInterlock_SetBinderYarnPositions(self, x, y)

    def SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers=1):
        return _Core.CTextileAngleInterlock_SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers)

    def BuildTextile(self):
        return _Core.CTextileAngleInterlock_BuildTextile(self)

    def __init__(self, *args):
        _Core.CTextileAngleInterlock_swiginit(self, _Core.new_CTextileAngleInterlock(*args))

# Register CTextileAngleInterlock in _Core:
_Core.CTextileAngleInterlock_swigregister(CTextileAngleInterlock)

class CTextileLayerToLayer(CTextile3DWeave):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileLayerToLayer

    def Copy(self):
        return _Core.CTextileLayerToLayer_Copy(self)

    def GetType(self):
        return _Core.CTextileLayerToLayer_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileLayerToLayer_PopulateTiXmlElement(self, Element, OutputType)

    def SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers=1):
        return _Core.CTextileLayerToLayer_SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers)

    def BuildTextile(self):
        return _Core.CTextileLayerToLayer_BuildTextile(self)

    def SetBinderPosition(self, x, y, zOffset):
        return _Core.CTextileLayerToLayer_SetBinderPosition(self, x, y, zOffset)

    def MoveBinderYarns(self, x, y, iLevel1, iLevel2):
        return _Core.CTextileLayerToLayer_MoveBinderYarns(self, x, y, iLevel1, iLevel2)

    def GetBinderOffset(self, x, y):
        return _Core.CTextileLayerToLayer_GetBinderOffset(self, x, y)

    def GetNumBinderLayers(self):
        return _Core.CTextileLayerToLayer_GetNumBinderLayers(self)

    def ShapeBinderYarns(self):
        return _Core.CTextileLayerToLayer_ShapeBinderYarns(self)

    def ConvertToPatternDraft(self, *args):
        return _Core.CTextileLayerToLayer_ConvertToPatternDraft(self, *args)

    def __init__(self, *args):
        _Core.CTextileLayerToLayer_swiginit(self, _Core.new_CTextileLayerToLayer(*args))

# Register CTextileLayerToLayer in _Core:
_Core.CTextileLayerToLayer_swigregister(CTextileLayerToLayer)

class CTextileOffsetAngleInterlock(CTextile3DWeave):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileOffsetAngleInterlock

    def Copy(self):
        return _Core.CTextileOffsetAngleInterlock_Copy(self)

    def GetType(self):
        return _Core.CTextileOffsetAngleInterlock_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileOffsetAngleInterlock_PopulateTiXmlElement(self, Element, OutputType)

    def SetBinderYarnPositions(self, x, y):
        return _Core.CTextileOffsetAngleInterlock_SetBinderYarnPositions(self, x, y)

    def AddYLayer(self, bOffset):
        return _Core.CTextileOffsetAngleInterlock_AddYLayer(self, bOffset)

    def FindMinMaxZ(self, dMinZ, dMaxZ):
        return _Core.CTextileOffsetAngleInterlock_FindMinMaxZ(self, dMinZ, dMaxZ)

    def SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers=1):
        return _Core.CTextileOffsetAngleInterlock_SetupLayers(self, iNumWarpLayers, iNumWeftLayers, iNumBinderLayers)

    def BuildTextile(self):
        return _Core.CTextileOffsetAngleInterlock_BuildTextile(self)

    def GetWidth(self):
        return _Core.CTextileOffsetAngleInterlock_GetWidth(self)

    def GetAverageWeftYarnSpacing(self):
        return _Core.CTextileOffsetAngleInterlock_GetAverageWeftYarnSpacing(self)

    def __init__(self, *args):
        _Core.CTextileOffsetAngleInterlock_swiginit(self, _Core.new_CTextileOffsetAngleInterlock(*args))

# Register CTextileOffsetAngleInterlock in _Core:
_Core.CTextileOffsetAngleInterlock_swigregister(CTextileOffsetAngleInterlock)

class CShearedTextileWeave2D(CTextileWeave2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CShearedTextileWeave2D

    def Copy(self):
        return _Core.CShearedTextileWeave2D_Copy(self)

    def GetType(self):
        return _Core.CShearedTextileWeave2D_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CShearedTextileWeave2D_PopulateTiXmlElement(self, Element, OutputType)

    def GetDefaultDomain(self, bSheared=False, bAddedDomainHeight=True):
        return _Core.CShearedTextileWeave2D_GetDefaultDomain(self, bSheared, bAddedDomainHeight)

    def GetShearAngle(self):
        return _Core.CShearedTextileWeave2D_GetShearAngle(self)

    def GetShearedDomain(self):
        return _Core.CShearedTextileWeave2D_GetShearedDomain(self)

    def __init__(self, *args):
        _Core.CShearedTextileWeave2D_swiginit(self, _Core.new_CShearedTextileWeave2D(*args))

# Register CShearedTextileWeave2D in _Core:
_Core.CShearedTextileWeave2D_swigregister(CShearedTextileWeave2D)

class CTextileLayered(CTextile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileLayered

    def Copy(self):
        return _Core.CTextileLayered_Copy(self)

    def GetType(self):
        return _Core.CTextileLayered_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CTextileLayered_PopulateTiXmlElement(self, Element, OutputType)

    def GetDefaultName(self):
        return _Core.CTextileLayered_GetDefaultName(self)

    def GetLayerYarnIndices(self):
        return _Core.CTextileLayered_GetLayerYarnIndices(self)

    def SetRelativeOffsets(self, Offsets):
        return _Core.CTextileLayered_SetRelativeOffsets(self, Offsets)

    def SetOffsets(self, *args):
        return _Core.CTextileLayered_SetOffsets(self, *args)

    def GetOffsets(self):
        return _Core.CTextileLayered_GetOffsets(self)

    def GetNumLayers(self):
        return _Core.CTextileLayered_GetNumLayers(self)

    def AddLayer(self, *args):
        return _Core.CTextileLayered_AddLayer(self, *args)

    def NestLayers(self):
        return _Core.CTextileLayered_NestLayers(self)

    def MaxNestLayers(self):
        return _Core.CTextileLayered_MaxNestLayers(self)

    def __init__(self, *args):
        _Core.CTextileLayered_swiginit(self, _Core.new_CTextileLayered(*args))

# Register CTextileLayered in _Core:
_Core.CTextileLayered_swigregister(CTextileLayered)

class CTextileDeformer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileDeformer

    def DeformTextile(self, Textile, bDeformDomain=True):
        return _Core.CTextileDeformer_DeformTextile(self, Textile, bDeformDomain)

    def GetDeformedCopyOfTextile(self, Textile, bDeformDomain=True):
        return _Core.CTextileDeformer_GetDeformedCopyOfTextile(self, Textile, bDeformDomain)

    def GetRepeatVectorDeformation(self):
        return _Core.CTextileDeformer_GetRepeatVectorDeformation(self)

    def SetRepeatVectorDeformation(self, RepeatDeformation):
        return _Core.CTextileDeformer_SetRepeatVectorDeformation(self, RepeatDeformation)

    def GetDisplacement(self, Pos, iYarn, Disp):
        return _Core.CTextileDeformer_GetDisplacement(self, Pos, iYarn, Disp)

    def __init__(self, *args):
        if self.__class__ == CTextileDeformer:
            _self = None
        else:
            _self = self
        _Core.CTextileDeformer_swiginit(self, _Core.new_CTextileDeformer(_self, *args))
    def __disown__(self):
        self.this.disown()
        _Core.disown_CTextileDeformer(self)
        return weakref.proxy(self)

# Register CTextileDeformer in _Core:
_Core.CTextileDeformer_swigregister(CTextileDeformer)

class CTextileDeformerVolumeMesh(CTextileDeformer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileDeformerVolumeMesh

    def SetYarnMeshDisplacements(self, iYarn, Mesh, Displacements):
        return _Core.CTextileDeformerVolumeMesh_SetYarnMeshDisplacements(self, iYarn, Mesh, Displacements)

    def GetDisplacement(self, Pos, iYarn, Disp):
        return _Core.CTextileDeformerVolumeMesh_GetDisplacement(self, Pos, iYarn, Disp)

    def __init__(self, *args):
        if self.__class__ == CTextileDeformerVolumeMesh:
            _self = None
        else:
            _self = self
        _Core.CTextileDeformerVolumeMesh_swiginit(self, _Core.new_CTextileDeformerVolumeMesh(_self, *args))
    def __disown__(self):
        self.this.disown()
        _Core.disown_CTextileDeformerVolumeMesh(self)
        return weakref.proxy(self)

# Register CTextileDeformerVolumeMesh in _Core:
_Core.CTextileDeformerVolumeMesh_swigregister(CTextileDeformerVolumeMesh)

class CGeometrySolver(CBasicVolumes, CTextileDeformer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CGeometrySolver

    def CreateSystem(self, *args):
        return _Core.CGeometrySolver_CreateSystem(self, *args)

    def SolveSystem(self):
        return _Core.CGeometrySolver_SolveSystem(self)

    def SaveToVTK(self, Filename):
        return _Core.CGeometrySolver_SaveToVTK(self, Filename)

    def DeformTextile(self):
        return _Core.CGeometrySolver_DeformTextile(self)

    def GetDeformedCopyOfTextile(self):
        return _Core.CGeometrySolver_GetDeformedCopyOfTextile(self)

    def SetTensileStress(self, dTensileStress):
        return _Core.CGeometrySolver_SetTensileStress(self, dTensileStress)

    def SetLongitudinalBendingModulus(self, dBendingModulus):
        return _Core.CGeometrySolver_SetLongitudinalBendingModulus(self, dBendingModulus)

    def SetTransverseBendingModulus(self, dBendingModulus):
        return _Core.CGeometrySolver_SetTransverseBendingModulus(self, dBendingModulus)

    def SetContactStiffness(self, dContactStiffness):
        return _Core.CGeometrySolver_SetContactStiffness(self, dContactStiffness)

    def SetDisabledStiffness(self, dDisabledStiffness):
        return _Core.CGeometrySolver_SetDisabledStiffness(self, dDisabledStiffness)

    def GetTensileStress(self):
        return _Core.CGeometrySolver_GetTensileStress(self)

    def GetLongitudinalBendingModulus(self):
        return _Core.CGeometrySolver_GetLongitudinalBendingModulus(self)

    def GetTransverseBendingModulus(self):
        return _Core.CGeometrySolver_GetTransverseBendingModulus(self)

    def GetContactStiffness(self):
        return _Core.CGeometrySolver_GetContactStiffness(self)

    def GetDisabledStiffness(self):
        return _Core.CGeometrySolver_GetDisabledStiffness(self)

    def __init__(self, *args):
        _Core.CGeometrySolver_swiginit(self, _Core.new_CGeometrySolver(*args))

# Register CGeometrySolver in _Core:
_Core.CGeometrySolver_swigregister(CGeometrySolver)

class CSimulation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSimulation

    def ClearDeformationSteps(self):
        return _Core.CSimulation_ClearDeformationSteps(self)

    def AddDeformationStep(self, Deformation):
        return _Core.CSimulation_AddDeformationStep(self, Deformation)

    def GetDeformationSteps(self):
        return _Core.CSimulation_GetDeformationSteps(self)

    def SetDeformationSteps(self, DeformationSteps):
        return _Core.CSimulation_SetDeformationSteps(self, DeformationSteps)

    def GetDeformation(self):
        return _Core.CSimulation_GetDeformation(self)

    def SetDeformation(self, Deformation):
        return _Core.CSimulation_SetDeformation(self, Deformation)

    def __init__(self, *args):
        _Core.CSimulation_swiginit(self, _Core.new_CSimulation(*args))

# Register CSimulation in _Core:
_Core.CSimulation_swigregister(CSimulation)

class ELEMENT_INDICES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ElementType = property(_Core.ELEMENT_INDICES_ElementType_get, _Core.ELEMENT_INDICES_ElementType_set)
    Index = property(_Core.ELEMENT_INDICES_Index_get, _Core.ELEMENT_INDICES_Index_set)

    def __init__(self, *args):
        _Core.ELEMENT_INDICES_swiginit(self, _Core.new_ELEMENT_INDICES(*args))
    __swig_destroy__ = _Core.delete_ELEMENT_INDICES

# Register ELEMENT_INDICES in _Core:
_Core.ELEMENT_INDICES_swigregister(ELEMENT_INDICES)

class CSimulationAbaqus(CSimulation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSimulationAbaqus

    def CreateAbaqusInputFile(self, Textile, Filename, bRegenerateMesh, iElementType=0, bAdjustMesh=False, Tolerance=0.0000001):
        return _Core.CSimulationAbaqus_CreateAbaqusInputFile(self, Textile, Filename, bRegenerateMesh, iElementType, bAdjustMesh, Tolerance)

    def SetIncludePlates(self, bInclude):
        return _Core.CSimulationAbaqus_SetIncludePlates(self, bInclude)

    def GetIncludePlates(self):
        return _Core.CSimulationAbaqus_GetIncludePlates(self)

    def SetInitialPlateGap(self, dPlateGap):
        return _Core.CSimulationAbaqus_SetInitialPlateGap(self, dPlateGap)

    def GetInitialPlateGap(self):
        return _Core.CSimulationAbaqus_GetInitialPlateGap(self)

    def SetWholeSurfaces(self, bWholeSurface):
        return _Core.CSimulationAbaqus_SetWholeSurfaces(self, bWholeSurface)

    def GetWholeSurfaces(self):
        return _Core.CSimulationAbaqus_GetWholeSurfaces(self)

    def SetYarnSurfaceInteraction(self, AbaqusCommands):
        return _Core.CSimulationAbaqus_SetYarnSurfaceInteraction(self, AbaqusCommands)

    def SetPlateSurfaceInteraction(self, AbaqusCommands):
        return _Core.CSimulationAbaqus_SetPlateSurfaceInteraction(self, AbaqusCommands)

    def SetStaticStepParameters(self, dInitTimeInc=0, dTimePeriod=0, dMinTimeInc=0, dMaxTimeInc=0):
        return _Core.CSimulationAbaqus_SetStaticStepParameters(self, dInitTimeInc, dTimePeriod, dMinTimeInc, dMaxTimeInc)

    def __init__(self, *args):
        _Core.CSimulationAbaqus_swiginit(self, _Core.new_CSimulationAbaqus(*args))

# Register CSimulationAbaqus in _Core:
_Core.CSimulationAbaqus_swigregister(CSimulationAbaqus)

class CMeshIntersectionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CMeshIntersectionData

    def SetIndex(self, index):
        return _Core.CMeshIntersectionData_SetIndex(self, index)

    def SetDepth(self, Depth):
        return _Core.CMeshIntersectionData_SetDepth(self, Depth)

    def SetPoint(self, Point):
        return _Core.CMeshIntersectionData_SetPoint(self, Point)

    def SetYarn(self, Yarn):
        return _Core.CMeshIntersectionData_SetYarn(self, Yarn)

    def SetBoundaryPairIndex(self, index):
        return _Core.CMeshIntersectionData_SetBoundaryPairIndex(self, index)

    def SetStartPoint(self, Point):
        return _Core.CMeshIntersectionData_SetStartPoint(self, Point)

    def SetInterpIndex(self, index):
        return _Core.CMeshIntersectionData_SetInterpIndex(self, index)

    def GetYarn(self):
        return _Core.CMeshIntersectionData_GetYarn(self)

    def GetElements(self):
        return _Core.CMeshIntersectionData_GetElements(self)

    def GetDepth(self):
        return _Core.CMeshIntersectionData_GetDepth(self)

    def GetPoint(self):
        return _Core.CMeshIntersectionData_GetPoint(self)

    def GetInterpPoint(self):
        return _Core.CMeshIntersectionData_GetInterpPoint(self)

    def GetIndex(self):
        return _Core.CMeshIntersectionData_GetIndex(self)

    def GetDisplacement(self):
        return _Core.CMeshIntersectionData_GetDisplacement(self)

    def GetInterpIndex(self):
        return _Core.CMeshIntersectionData_GetInterpIndex(self)

    def FindInterpolationNode(self, YarnMesh):
        return _Core.CMeshIntersectionData_FindInterpolationNode(self, YarnMesh)

    def FindElements(self, IndexArray, ElementType):
        return _Core.CMeshIntersectionData_FindElements(self, IndexArray, ElementType)

    def MoveNode(self, YarnMesh):
        return _Core.CMeshIntersectionData_MoveNode(self, YarnMesh)

    def AdjustInterpolationNode(self, YarnMesh):
        return _Core.CMeshIntersectionData_AdjustInterpolationNode(self, YarnMesh)

    def FindPolygonPoints(self, Polygons):
        return _Core.CMeshIntersectionData_FindPolygonPoints(self, Polygons)

    def __init__(self, *args):
        _Core.CMeshIntersectionData_swiginit(self, _Core.new_CMeshIntersectionData(*args))

# Register CMeshIntersectionData in _Core:
_Core.CMeshIntersectionData_swigregister(CMeshIntersectionData)

class CAdjustMeshInterference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CAdjustMeshInterference

    def AdjustMesh(self, Textile, YarnMeshes, Tolerance):
        return _Core.CAdjustMeshInterference_AdjustMesh(self, Textile, YarnMeshes, Tolerance)

    def GetNodeDisplacements(self, i):
        return _Core.CAdjustMeshInterference_GetNodeDisplacements(self, i)

    def CreateVolumeMeshes(self, Textile, YarnMeshes):
        return _Core.CAdjustMeshInterference_CreateVolumeMeshes(self, Textile, YarnMeshes)

    def AdjustSectionMeshes(self, Textile, YarnMeshes):
        return _Core.CAdjustMeshInterference_AdjustSectionMeshes(self, Textile, YarnMeshes)

    def __init__(self, *args):
        _Core.CAdjustMeshInterference_swiginit(self, _Core.new_CAdjustMeshInterference(*args))

# Register CAdjustMeshInterference in _Core:
_Core.CAdjustMeshInterference_swigregister(CAdjustMeshInterference)

class CSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSection

    def __eq__(self, CompareMe):
        return _Core.CSection___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSection_Copy(self)

    @staticmethod
    def CreateSection(Element):
        return _Core.CSection_CreateSection(Element)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSection_PopulateTiXmlElement(self, Element, OutputType)

    def GetPoints(self, iNumPoints, bEquiSpaced=False):
        return _Core.CSection_GetPoints(self, iNumPoints, bEquiSpaced)

    def GetMesh(self, iNumPoints, bEquiSpaced=True):
        return _Core.CSection_GetMesh(self, iNumPoints, bEquiSpaced)

    @staticmethod
    def GetArea(Section):
        return _Core.CSection_GetArea(Section)

    @staticmethod
    def GetCircumference(Section):
        return _Core.CSection_GetCircumference(Section)

    def AssignSectionMesh(self, SectionMesh):
        return _Core.CSection_AssignSectionMesh(self, SectionMesh)

    def GetDefaultName(self):
        return _Core.CSection_GetDefaultName(self)

    def GetType(self):
        return _Core.CSection_GetType(self)

    def GetBaseType(self):
        return _Core.CSection_GetBaseType(self)

    def SetSectionMeshLayers(self, iNum):
        return _Core.CSection_SetSectionMeshLayers(self, iNum)

    def GetSectionMeshLayers(self):
        return _Core.CSection_GetSectionMeshLayers(self)

    def GetPoint(self, t):
        return _Core.CSection_GetPoint(self, t)

# Register CSection in _Core:
_Core.CSection_swigregister(CSection)

def CSection_CreateSection(Element):
    return _Core.CSection_CreateSection(Element)

def CSection_GetArea(Section):
    return _Core.CSection_GetArea(Section)

def CSection_GetCircumference(Section):
    return _Core.CSection_GetCircumference(Section)

class CSectionBezier(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionBezier

    def __eq__(self, CompareMe):
        return _Core.CSectionBezier___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionBezier_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionBezier_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionBezier_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionBezier_GetDefaultName(self)

    def GetPoint(self, t):
        return _Core.CSectionBezier_GetPoint(self, t)

    def __init__(self, *args):
        _Core.CSectionBezier_swiginit(self, _Core.new_CSectionBezier(*args))

# Register CSectionBezier in _Core:
_Core.CSectionBezier_swigregister(CSectionBezier)

class CSectionEllipse(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionEllipse

    def __eq__(self, CompareMe):
        return _Core.CSectionEllipse___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionEllipse_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionEllipse_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionEllipse_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionEllipse_GetDefaultName(self)

    def GetPoint(self, t):
        return _Core.CSectionEllipse_GetPoint(self, t)

    def GetWidth(self):
        return _Core.CSectionEllipse_GetWidth(self)

    def GetHeight(self):
        return _Core.CSectionEllipse_GetHeight(self)

    def SetWidth(self, dWidth):
        return _Core.CSectionEllipse_SetWidth(self, dWidth)

    def __init__(self, *args):
        _Core.CSectionEllipse_swiginit(self, _Core.new_CSectionEllipse(*args))

# Register CSectionEllipse in _Core:
_Core.CSectionEllipse_swigregister(CSectionEllipse)

class CSectionHybrid(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionHybrid

    def __eq__(self, CompareMe):
        return _Core.CSectionHybrid___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionHybrid_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionHybrid_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionHybrid_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionHybrid_GetDefaultName(self)

    def AddDivision(self, dFraction):
        return _Core.CSectionHybrid_AddDivision(self, dFraction)

    def AssignSection(self, iIndex, Section):
        return _Core.CSectionHybrid_AssignSection(self, iIndex, Section)

    def GetNumDivisions(self):
        return _Core.CSectionHybrid_GetNumDivisions(self)

    def GetNumSections(self):
        return _Core.CSectionHybrid_GetNumSections(self)

    def GetDivision(self, iIndex):
        return _Core.CSectionHybrid_GetDivision(self, iIndex)

    def GetSection(self, iIndex):
        return _Core.CSectionHybrid_GetSection(self, iIndex)

    def GetPoint(self, t):
        return _Core.CSectionHybrid_GetPoint(self, t)

    def __init__(self, *args):
        _Core.CSectionHybrid_swiginit(self, _Core.new_CSectionHybrid(*args))

# Register CSectionHybrid in _Core:
_Core.CSectionHybrid_swigregister(CSectionHybrid)

class CSectionLenticular(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionLenticular

    def __eq__(self, CompareMe):
        return _Core.CSectionLenticular___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionLenticular_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionLenticular_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionLenticular_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionLenticular_GetDefaultName(self)

    def GetPoint(self, t):
        return _Core.CSectionLenticular_GetPoint(self, t)

    def GetWidth(self):
        return _Core.CSectionLenticular_GetWidth(self)

    def GetHeight(self):
        return _Core.CSectionLenticular_GetHeight(self)

    def GetDistortion(self):
        return _Core.CSectionLenticular_GetDistortion(self)

    def __init__(self, *args):
        _Core.CSectionLenticular_swiginit(self, _Core.new_CSectionLenticular(*args))

# Register CSectionLenticular in _Core:
_Core.CSectionLenticular_swigregister(CSectionLenticular)

class CSectionPolygon(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionPolygon

    def __eq__(self, CompareMe):
        return _Core.CSectionPolygon___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionPolygon_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionPolygon_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionPolygon_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionPolygon_GetDefaultName(self)

    def GetPoint(self, t):
        return _Core.CSectionPolygon_GetPoint(self, t)

    def Scale(self, *args):
        return _Core.CSectionPolygon_Scale(self, *args)

    def __init__(self, *args):
        _Core.CSectionPolygon_swiginit(self, _Core.new_CSectionPolygon(*args))

# Register CSectionPolygon in _Core:
_Core.CSectionPolygon_swigregister(CSectionPolygon)

class CSectionPowerEllipse(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionPowerEllipse

    def __eq__(self, CompareMe):
        return _Core.CSectionPowerEllipse___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionPowerEllipse_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionPowerEllipse_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionPowerEllipse_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionPowerEllipse_GetDefaultName(self)

    def GetPoint(self, t):
        return _Core.CSectionPowerEllipse_GetPoint(self, t)

    def GetTangent(self, t):
        return _Core.CSectionPowerEllipse_GetTangent(self, t)

    def GetWidth(self):
        return _Core.CSectionPowerEllipse_GetWidth(self)

    def GetHeight(self):
        return _Core.CSectionPowerEllipse_GetHeight(self)

    def GetPower(self):
        return _Core.CSectionPowerEllipse_GetPower(self)

    def GetXOffset(self):
        return _Core.CSectionPowerEllipse_GetXOffset(self)

    def SetWidth(self, dWidth):
        return _Core.CSectionPowerEllipse_SetWidth(self, dWidth)

    def SetHeight(self, dHeight):
        return _Core.CSectionPowerEllipse_SetHeight(self, dHeight)

    def SetPower(self, dPower):
        return _Core.CSectionPowerEllipse_SetPower(self, dPower)

    def __init__(self, *args):
        _Core.CSectionPowerEllipse_swiginit(self, _Core.new_CSectionPowerEllipse(*args))

# Register CSectionPowerEllipse in _Core:
_Core.CSectionPowerEllipse_swigregister(CSectionPowerEllipse)

class CSectionRotated(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionRotated

    def __eq__(self, CompareMe):
        return _Core.CSectionRotated___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionRotated_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionRotated_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionRotated_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionRotated_GetDefaultName(self)

    def GetBaseType(self):
        return _Core.CSectionRotated_GetBaseType(self)

    def GetPoint(self, t):
        return _Core.CSectionRotated_GetPoint(self, t)

    def GetSection(self):
        return _Core.CSectionRotated_GetSection(self)

    def GetAngle(self):
        return _Core.CSectionRotated_GetAngle(self)

    def __init__(self, *args):
        _Core.CSectionRotated_swiginit(self, _Core.new_CSectionRotated(*args))

# Register CSectionRotated in _Core:
_Core.CSectionRotated_swigregister(CSectionRotated)

class CSectionScaled(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionScaled

    def __eq__(self, CompareMe):
        return _Core.CSectionScaled___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionScaled_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionScaled_PopulateTiXmlElement(self, Element, OutputType)

    def GetType(self):
        return _Core.CSectionScaled_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionScaled_GetDefaultName(self)

    def GetPoint(self, t):
        return _Core.CSectionScaled_GetPoint(self, t)

    def GetSection(self):
        return _Core.CSectionScaled_GetSection(self)

    def GetScale(self):
        return _Core.CSectionScaled_GetScale(self)

    def __init__(self, *args):
        _Core.CSectionScaled_swiginit(self, _Core.new_CSectionScaled(*args))

# Register CSectionScaled in _Core:
_Core.CSectionScaled_swigregister(CSectionScaled)

class CSectionRectangle(CSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionRectangle

    def __eq__(self, CompareMe):
        return _Core.CSectionRectangle___eq__(self, CompareMe)

    def Copy(self):
        return _Core.CSectionRectangle_Copy(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionRectangle_PopulateTiXmlElement(self, Element, OutputType)

    def GetPoints(self, iNumPoints, bEquiSpaced=False):
        return _Core.CSectionRectangle_GetPoints(self, iNumPoints, bEquiSpaced)

    def GetType(self):
        return _Core.CSectionRectangle_GetType(self)

    def GetDefaultName(self):
        return _Core.CSectionRectangle_GetDefaultName(self)

    def GetPoint(self, t):
        return _Core.CSectionRectangle_GetPoint(self, t)

    def GetWidth(self):
        return _Core.CSectionRectangle_GetWidth(self)

    def GetHeight(self):
        return _Core.CSectionRectangle_GetHeight(self)

    def SetWidth(self, dWidth):
        return _Core.CSectionRectangle_SetWidth(self, dWidth)

    def SetHeight(self, dHeight):
        return _Core.CSectionRectangle_SetHeight(self, dHeight)

    def __init__(self, *args):
        _Core.CSectionRectangle_swiginit(self, _Core.new_CSectionRectangle(*args))

# Register CSectionRectangle in _Core:
_Core.CSectionRectangle_swigregister(CSectionRectangle)

class YARN_POSITION_INFORMATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dSectionPosition = property(_Core.YARN_POSITION_INFORMATION_dSectionPosition_get, _Core.YARN_POSITION_INFORMATION_dSectionPosition_set)
    iSection = property(_Core.YARN_POSITION_INFORMATION_iSection_get, _Core.YARN_POSITION_INFORMATION_iSection_set)
    SectionLengths = property(_Core.YARN_POSITION_INFORMATION_SectionLengths_get, _Core.YARN_POSITION_INFORMATION_SectionLengths_set)

    def GetYarnPosition(self):
        return _Core.YARN_POSITION_INFORMATION_GetYarnPosition(self)

    def __init__(self, *args):
        _Core.YARN_POSITION_INFORMATION_swiginit(self, _Core.new_YARN_POSITION_INFORMATION(*args))
    __swig_destroy__ = _Core.delete_YARN_POSITION_INFORMATION

# Register YARN_POSITION_INFORMATION in _Core:
_Core.YARN_POSITION_INFORMATION_swigregister(YARN_POSITION_INFORMATION)

class CYarnSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CYarnSection
    m_bForceEqualMeshLayers = property(_Core.CYarnSection_m_bForceEqualMeshLayers_get, _Core.CYarnSection_m_bForceEqualMeshLayers_set)

    def Copy(self):
        return _Core.CYarnSection_Copy(self)

    def GetType(self):
        return _Core.CYarnSection_GetType(self)

    @staticmethod
    def CreateYarnSection(Element):
        return _Core.CYarnSection_CreateYarnSection(Element)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CYarnSection_PopulateTiXmlElement(self, Element, OutputType)

    def GetSection(self, PositionInfo, iNumPoints, bEquiSpaced=False):
        return _Core.CYarnSection_GetSection(self, PositionInfo, iNumPoints, bEquiSpaced)

    def GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced):
        return _Core.CYarnSection_GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced)

    def SetSectionMeshLayersEqual(self, iNumPoints):
        return _Core.CYarnSection_SetSectionMeshLayersEqual(self, iNumPoints)

    def GetForceMeshLayers(self):
        return _Core.CYarnSection_GetForceMeshLayers(self)

    def GetSectionConstant(self):
        return _Core.CYarnSection_GetSectionConstant(self)

    def GetSectionInterpNode(self):
        return _Core.CYarnSection_GetSectionInterpNode(self)

    def GetSectionInterpPosition(self):
        return _Core.CYarnSection_GetSectionInterpPosition(self)

# Register CYarnSection in _Core:
_Core.CYarnSection_swigregister(CYarnSection)

def CYarnSection_CreateYarnSection(Element):
    return _Core.CYarnSection_CreateYarnSection(Element)

class CYarnSectionConstant(CYarnSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CYarnSectionConstant

    def Copy(self):
        return _Core.CYarnSectionConstant_Copy(self)

    def GetType(self):
        return _Core.CYarnSectionConstant_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CYarnSectionConstant_PopulateTiXmlElement(self, Element, OutputType)

    def GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced):
        return _Core.CYarnSectionConstant_GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced)

    def GetSection(self, *args):
        return _Core.CYarnSectionConstant_GetSection(self, *args)

    def __init__(self, *args):
        _Core.CYarnSectionConstant_swiginit(self, _Core.new_CYarnSectionConstant(*args))

# Register CYarnSectionConstant in _Core:
_Core.CYarnSectionConstant_swigregister(CYarnSectionConstant)

class CYarnSectionInterp(CYarnSection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CYarnSectionInterp

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CYarnSectionInterp_PopulateTiXmlElement(self, Element, OutputType)

    def GetRamped(self):
        return _Core.CYarnSectionInterp_GetRamped(self)

    def GetPolar(self):
        return _Core.CYarnSectionInterp_GetPolar(self)

# Register CYarnSectionInterp in _Core:
_Core.CYarnSectionInterp_swigregister(CYarnSectionInterp)

class CYarnSectionInterpNode(CYarnSectionInterp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CYarnSectionInterpNode

    def GetSection(self, PositionInfo, iNumPoints, bEquiSpaced=False):
        return _Core.CYarnSectionInterpNode_GetSection(self, PositionInfo, iNumPoints, bEquiSpaced)

    def GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced):
        return _Core.CYarnSectionInterpNode_GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced)

    def Copy(self):
        return _Core.CYarnSectionInterpNode_Copy(self)

    def GetType(self):
        return _Core.CYarnSectionInterpNode_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CYarnSectionInterpNode_PopulateTiXmlElement(self, Element, OutputType)

    def AddSection(self, Section):
        return _Core.CYarnSectionInterpNode_AddSection(self, Section)

    def ReplaceSection(self, iIndex, Section):
        return _Core.CYarnSectionInterpNode_ReplaceSection(self, iIndex, Section)

    def ReplaceMidSection(self, iNodeIndex, iIndex, Section):
        return _Core.CYarnSectionInterpNode_ReplaceMidSection(self, iNodeIndex, iIndex, Section)

    def DeleteSection(self, iIndex):
        return _Core.CYarnSectionInterpNode_DeleteSection(self, iIndex)

    def InsertSection(self, *args):
        return _Core.CYarnSectionInterpNode_InsertSection(self, *args)

    def SetSectionMeshLayersEqual(self, iNumPoints):
        return _Core.CYarnSectionInterpNode_SetSectionMeshLayersEqual(self, iNumPoints)

    def GetNumNodeSections(self):
        return _Core.CYarnSectionInterpNode_GetNumNodeSections(self)

    def GetNodeSection(self, iIndex):
        return _Core.CYarnSectionInterpNode_GetNodeSection(self, iIndex)

    def GetNumMidNodeSections(self, iIndex):
        return _Core.CYarnSectionInterpNode_GetNumMidNodeSections(self, iIndex)

    def GetMidNodeSectionPos(self, iNodeIndex, iIndex):
        return _Core.CYarnSectionInterpNode_GetMidNodeSectionPos(self, iNodeIndex, iIndex)

    def __init__(self, *args):
        _Core.CYarnSectionInterpNode_swiginit(self, _Core.new_CYarnSectionInterpNode(*args))

# Register CYarnSectionInterpNode in _Core:
_Core.CYarnSectionInterpNode_swigregister(CYarnSectionInterpNode)

class CYarnSectionInterpPosition(CYarnSectionInterp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CYarnSectionInterpPosition

    def GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced):
        return _Core.CYarnSectionInterpPosition_GetSectionMesh(self, PositionInfo, iNumPoints, bEquiSpaced)

    def Copy(self):
        return _Core.CYarnSectionInterpPosition_Copy(self)

    def GetType(self):
        return _Core.CYarnSectionInterpPosition_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CYarnSectionInterpPosition_PopulateTiXmlElement(self, Element, OutputType)

    def AddSection(self, dPosition, Section):
        return _Core.CYarnSectionInterpPosition_AddSection(self, dPosition, Section)

    def SetSectionMeshLayersEqual(self, iNumPoints):
        return _Core.CYarnSectionInterpPosition_SetSectionMeshLayersEqual(self, iNumPoints)

    def GetNumNodeSections(self):
        return _Core.CYarnSectionInterpPosition_GetNumNodeSections(self)

    def GetSection(self, *args):
        return _Core.CYarnSectionInterpPosition_GetSection(self, *args)

    def GetSectionPosition(self, iIndex):
        return _Core.CYarnSectionInterpPosition_GetSectionPosition(self, iIndex)

    def __init__(self, *args):
        _Core.CYarnSectionInterpPosition_swiginit(self, _Core.new_CYarnSectionInterpPosition(*args))

# Register CYarnSectionInterpPosition in _Core:
_Core.CYarnSectionInterpPosition_swigregister(CYarnSectionInterpPosition)

class CSectionMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionMesh

    def Copy(self):
        return _Core.CSectionMesh_Copy(self)

    def GetType(self):
        return _Core.CSectionMesh_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionMesh_PopulateTiXmlElement(self, Element, OutputType)

    @staticmethod
    def CreateSectionMesh(Element):
        return _Core.CSectionMesh_CreateSectionMesh(Element)

    def GetMesh(self, Section):
        return _Core.CSectionMesh_GetMesh(self, Section)

    def SetNumLayers(self, iNumLayers):
        return _Core.CSectionMesh_SetNumLayers(self, iNumLayers)

    def GetNumLayers(self):
        return _Core.CSectionMesh_GetNumLayers(self)

# Register CSectionMesh in _Core:
_Core.CSectionMesh_swigregister(CSectionMesh)

def CSectionMesh_CreateSectionMesh(Element):
    return _Core.CSectionMesh_CreateSectionMesh(Element)

class CSectionMeshTriangulate(CSectionMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionMeshTriangulate

    def Copy(self):
        return _Core.CSectionMeshTriangulate_Copy(self)

    def GetType(self):
        return _Core.CSectionMeshTriangulate_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionMeshTriangulate_PopulateTiXmlElement(self, Element, OutputType)

    @staticmethod
    def GetSimpleMesh(Section):
        return _Core.CSectionMeshTriangulate_GetSimpleMesh(Section)

    def __init__(self, *args):
        _Core.CSectionMeshTriangulate_swiginit(self, _Core.new_CSectionMeshTriangulate(*args))

# Register CSectionMeshTriangulate in _Core:
_Core.CSectionMeshTriangulate_swigregister(CSectionMeshTriangulate)

def CSectionMeshTriangulate_GetSimpleMesh(Section):
    return _Core.CSectionMeshTriangulate_GetSimpleMesh(Section)

class CSectionMeshRectangular(CSectionMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionMeshRectangular

    def Copy(self):
        return _Core.CSectionMeshRectangular_Copy(self)

    def GetType(self):
        return _Core.CSectionMeshRectangular_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionMeshRectangular_PopulateTiXmlElement(self, Element, OutputType)

    def SetNumLayers(self, iNum):
        return _Core.CSectionMeshRectangular_SetNumLayers(self, iNum)

    def GetNumLayers(self):
        return _Core.CSectionMeshRectangular_GetNumLayers(self)

    def CalculateNumberofLayers(self, Section):
        return _Core.CSectionMeshRectangular_CalculateNumberofLayers(self, Section)

    def __init__(self, *args):
        _Core.CSectionMeshRectangular_swiginit(self, _Core.new_CSectionMeshRectangular(*args))

# Register CSectionMeshRectangular in _Core:
_Core.CSectionMeshRectangular_swigregister(CSectionMeshRectangular)

class CSectionMeshRectangleSection(CSectionMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSectionMeshRectangleSection

    def Copy(self):
        return _Core.CSectionMeshRectangleSection_Copy(self)

    def GetType(self):
        return _Core.CSectionMeshRectangleSection_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CSectionMeshRectangleSection_PopulateTiXmlElement(self, Element, OutputType)

    def SetNumLayers(self, iNum):
        return _Core.CSectionMeshRectangleSection_SetNumLayers(self, iNum)

    def GetNumLayers(self):
        return _Core.CSectionMeshRectangleSection_GetNumLayers(self)

    def CalculateNumberofLayers(self, Section):
        return _Core.CSectionMeshRectangleSection_CalculateNumberofLayers(self, Section)

    def __init__(self, *args):
        _Core.CSectionMeshRectangleSection_swiginit(self, _Core.new_CSectionMeshRectangleSection(*args))

# Register CSectionMeshRectangleSection in _Core:
_Core.CSectionMeshRectangleSection_swigregister(CSectionMeshRectangleSection)

class CInterpolation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CInterpolation

    def Copy(self):
        return _Core.CInterpolation_Copy(self)

    def GetType(self):
        return _Core.CInterpolation_GetType(self)

    @staticmethod
    def CreateInterpolation(Element):
        return _Core.CInterpolation_CreateInterpolation(Element)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CInterpolation_PopulateTiXmlElement(self, Element, OutputType)

    def GetSlaveNodes(self, MasterNodes, iNumPoints, bEquiSpaced=True):
        return _Core.CInterpolation_GetSlaveNodes(self, MasterNodes, iNumPoints, bEquiSpaced)

    def Initialise(self, MasterNodes):
        return _Core.CInterpolation_Initialise(self, MasterNodes)

    def GetNode(self, *args):
        return _Core.CInterpolation_GetNode(self, *args)

    def SetPeriodic(self, bPeriodic):
        return _Core.CInterpolation_SetPeriodic(self, bPeriodic)

    def SetForceInPlaneTangent(self, bForceInPlaneTangent):
        return _Core.CInterpolation_SetForceInPlaneTangent(self, bForceInPlaneTangent)

    def GetPeriodic(self):
        return _Core.CInterpolation_GetPeriodic(self)

    def GetForceInPlaneTangent(self):
        return _Core.CInterpolation_GetForceInPlaneTangent(self)

# Register CInterpolation in _Core:
_Core.CInterpolation_swigregister(CInterpolation)

def CInterpolation_CreateInterpolation(Element):
    return _Core.CInterpolation_CreateInterpolation(Element)

class CInterpolationBezier(CInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CInterpolationBezier

    def Copy(self):
        return _Core.CInterpolationBezier_Copy(self)

    def GetType(self):
        return _Core.CInterpolationBezier_GetType(self)

    def Initialise(self, MasterNodes):
        return _Core.CInterpolationBezier_Initialise(self, MasterNodes)

    def GetNode(self, MasterNodes, iIndex, t):
        return _Core.CInterpolationBezier_GetNode(self, MasterNodes, iIndex, t)

    def __init__(self, *args):
        _Core.CInterpolationBezier_swiginit(self, _Core.new_CInterpolationBezier(*args))

# Register CInterpolationBezier in _Core:
_Core.CInterpolationBezier_swigregister(CInterpolationBezier)

class CInterpolationCubic(CInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CInterpolationCubic

    def Copy(self):
        return _Core.CInterpolationCubic_Copy(self)

    def GetType(self):
        return _Core.CInterpolationCubic_GetType(self)

    def Initialise(self, MasterNodes):
        return _Core.CInterpolationCubic_Initialise(self, MasterNodes)

    def GetNode(self, MasterNodes, iIndex, t):
        return _Core.CInterpolationCubic_GetNode(self, MasterNodes, iIndex, t)

    def __init__(self, *args):
        _Core.CInterpolationCubic_swiginit(self, _Core.new_CInterpolationCubic(*args))

# Register CInterpolationCubic in _Core:
_Core.CInterpolationCubic_swigregister(CInterpolationCubic)

class CInterpolationLinear(CInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CInterpolationLinear

    def Copy(self):
        return _Core.CInterpolationLinear_Copy(self)

    def GetType(self):
        return _Core.CInterpolationLinear_GetType(self)

    def Initialise(self, MasterNodes):
        return _Core.CInterpolationLinear_Initialise(self, MasterNodes)

    def GetNode(self, MasterNodes, iIndex, t):
        return _Core.CInterpolationLinear_GetNode(self, MasterNodes, iIndex, t)

    def __init__(self, *args):
        _Core.CInterpolationLinear_swiginit(self, _Core.new_CInterpolationLinear(*args))

# Register CInterpolationLinear in _Core:
_Core.CInterpolationLinear_swigregister(CInterpolationLinear)

class CInterpolationAdjusted(CInterpolation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CInterpolationAdjusted

    def Copy(self):
        return _Core.CInterpolationAdjusted_Copy(self)

    def GetType(self):
        return _Core.CInterpolationAdjusted_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CInterpolationAdjusted_PopulateTiXmlElement(self, Element, OutputType)

    def Initialise(self, MasterNodes):
        return _Core.CInterpolationAdjusted_Initialise(self, MasterNodes)

    def GetNode(self, MasterNodes, iIndex, t):
        return _Core.CInterpolationAdjusted_GetNode(self, MasterNodes, iIndex, t)

    def AddAdjustment(self, iIndex, t, Vector):
        return _Core.CInterpolationAdjusted_AddAdjustment(self, iIndex, t, Vector)

    def __init__(self, *args):
        _Core.CInterpolationAdjusted_swiginit(self, _Core.new_CInterpolationAdjusted(*args))

# Register CInterpolationAdjusted in _Core:
_Core.CInterpolationAdjusted_swigregister(CInterpolationAdjusted)

class CDomain(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CDomain

    def Copy(self):
        return _Core.CDomain_Copy(self)

    def PopulateTiXmlElement(self, *args):
        return _Core.CDomain_PopulateTiXmlElement(self, *args)

    def GetRepeatLimits(self, Yarn):
        return _Core.CDomain_GetRepeatLimits(self, Yarn)

    def GetTranslations(self, Yarn):
        return _Core.CDomain_GetTranslations(self, Yarn)

    def ClipMeshToDomain(self, *args):
        return _Core.CDomain_ClipMeshToDomain(self, *args)

    def GetType(self):
        return _Core.CDomain_GetType(self)

    def GetMesh(self):
        return _Core.CDomain_GetMesh(self)

    def GetVolume(self):
        return _Core.CDomain_GetVolume(self)

    def Grow(self, dDistance):
        return _Core.CDomain_Grow(self, dDistance)

    def Rotate(self, Rotation):
        return _Core.CDomain_Rotate(self, Rotation)

    def Translate(self, Vector):
        return _Core.CDomain_Translate(self, Vector)

    def Deform(self, Transformation):
        return _Core.CDomain_Deform(self, Transformation)

    def PointInDomain(self, Point):
        return _Core.CDomain_PointInDomain(self, Point)

# Register CDomain in _Core:
_Core.CDomain_swigregister(CDomain)

class CDomainPlanes(CDomain):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CDomainPlanes

    def Copy(self):
        return _Core.CDomainPlanes_Copy(self)

    def PopulateTiXmlElement(self, *args):
        return _Core.CDomainPlanes_PopulateTiXmlElement(self, *args)

    def GetRepeatLimits(self, Yarn):
        return _Core.CDomainPlanes_GetRepeatLimits(self, Yarn)

    def GetTranslations(self, Yarn):
        return _Core.CDomainPlanes_GetTranslations(self, Yarn)

    def ClipMeshToDomain(self, *args):
        return _Core.CDomainPlanes_ClipMeshToDomain(self, *args)

    def GetType(self):
        return _Core.CDomainPlanes_GetType(self)

    def AddPlane(self, Plane):
        return _Core.CDomainPlanes_AddPlane(self, Plane)

    def GetPlanes(self):
        return _Core.CDomainPlanes_GetPlanes(self)

    def GetBoxLimits(self, Min, Max):
        return _Core.CDomainPlanes_GetBoxLimits(self, Min, Max)

    def Grow(self, dDistance):
        return _Core.CDomainPlanes_Grow(self, dDistance)

    def Rotate(self, Rotation):
        return _Core.CDomainPlanes_Rotate(self, Rotation)

    def Translate(self, Vector):
        return _Core.CDomainPlanes_Translate(self, Vector)

    def Deform(self, Transformation):
        return _Core.CDomainPlanes_Deform(self, Transformation)

    def GetPlane(self, Normal, Plane):
        return _Core.CDomainPlanes_GetPlane(self, Normal, Plane)

    def SetPlane(self, index, Plane):
        return _Core.CDomainPlanes_SetPlane(self, index, Plane)

    def PointInDomain(self, Point):
        return _Core.CDomainPlanes_PointInDomain(self, Point)

    def __init__(self, *args):
        _Core.CDomainPlanes_swiginit(self, _Core.new_CDomainPlanes(*args))

# Register CDomainPlanes in _Core:
_Core.CDomainPlanes_swigregister(CDomainPlanes)

class CFibreDistribution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CFibreDistribution

    def Copy(self):
        return _Core.CFibreDistribution_Copy(self)

    def GetType(self):
        return _Core.CFibreDistribution_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CFibreDistribution_PopulateTiXmlElement(self, Element, OutputType)

    def GetVolumeFraction(self, *args):
        return _Core.CFibreDistribution_GetVolumeFraction(self, *args)

# Register CFibreDistribution in _Core:
_Core.CFibreDistribution_swigregister(CFibreDistribution)

class CFibreDistributionConst(CFibreDistribution):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CFibreDistributionConst

    def Copy(self):
        return _Core.CFibreDistributionConst_Copy(self)

    def GetType(self):
        return _Core.CFibreDistributionConst_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CFibreDistributionConst_PopulateTiXmlElement(self, Element, OutputType)

    def GetVolumeFraction(self, *args):
        return _Core.CFibreDistributionConst_GetVolumeFraction(self, *args)

    def __init__(self, *args):
        _Core.CFibreDistributionConst_swiginit(self, _Core.new_CFibreDistributionConst(*args))

# Register CFibreDistributionConst in _Core:
_Core.CFibreDistributionConst_swigregister(CFibreDistributionConst)

class CFibreDistribution1DQuad(CFibreDistribution):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CFibreDistribution1DQuad

    def Copy(self):
        return _Core.CFibreDistribution1DQuad_Copy(self)

    def GetType(self):
        return _Core.CFibreDistribution1DQuad_GetType(self)

    def PopulateTiXmlElement(self, Element, OutputType):
        return _Core.CFibreDistribution1DQuad_PopulateTiXmlElement(self, Element, OutputType)

    def GetVolumeFraction(self, Section, dFibreArea, Location, YarnIndex=-1):
        return _Core.CFibreDistribution1DQuad_GetVolumeFraction(self, Section, dFibreArea, Location, YarnIndex)

    def __init__(self, *args):
        _Core.CFibreDistribution1DQuad_swiginit(self, _Core.new_CFibreDistribution1DQuad(*args))

# Register CFibreDistribution1DQuad in _Core:
_Core.CFibreDistribution1DQuad_swigregister(CFibreDistribution1DQuad)

class CVoxelMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CVoxelMesh

    def SaveVoxelMesh(self, *args):
        return _Core.CVoxelMesh_SaveVoxelMesh(self, *args)

    def AddElementInfo(self, RowInfo):
        return _Core.CVoxelMesh_AddElementInfo(self, RowInfo)

    def OutputOrientationsAndElementSets(self, Filename):
        return _Core.CVoxelMesh_OutputOrientationsAndElementSets(self, Filename)

    def GetMaterials(self):
        return _Core.CVoxelMesh_GetMaterials(self)

# Register CVoxelMesh in _Core:
_Core.CVoxelMesh_swigregister(CVoxelMesh)

class CRectangularVoxelMesh(CVoxelMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.CRectangularVoxelMesh_swiginit(self, _Core.new_CRectangularVoxelMesh(*args))
    __swig_destroy__ = _Core.delete_CRectangularVoxelMesh

# Register CRectangularVoxelMesh in _Core:
_Core.CRectangularVoxelMesh_swigregister(CRectangularVoxelMesh)

class CShearedVoxelMesh(CVoxelMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.CShearedVoxelMesh_swiginit(self, _Core.new_CShearedVoxelMesh(*args))
    __swig_destroy__ = _Core.delete_CShearedVoxelMesh

# Register CShearedVoxelMesh in _Core:
_Core.CShearedVoxelMesh_swigregister(CShearedVoxelMesh)

class CStaggeredVoxelMesh(CRectangularVoxelMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.CStaggeredVoxelMesh_swiginit(self, _Core.new_CStaggeredVoxelMesh(*args))
    __swig_destroy__ = _Core.delete_CStaggeredVoxelMesh

    def SetOffset(self, Offset):
        return _Core.CStaggeredVoxelMesh_SetOffset(self, Offset)

# Register CStaggeredVoxelMesh in _Core:
_Core.CStaggeredVoxelMesh_swigregister(CStaggeredVoxelMesh)

class CRotatedVoxelMesh(CVoxelMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Core.CRotatedVoxelMesh_swiginit(self, _Core.new_CRotatedVoxelMesh(*args))
    __swig_destroy__ = _Core.delete_CRotatedVoxelMesh

# Register CRotatedVoxelMesh in _Core:
_Core.CRotatedVoxelMesh_swigregister(CRotatedVoxelMesh)

class CTetgenMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTetgenMesh

    def SaveTetgenMesh(self, Textile, OutputFilename, Parameters, bPeriodic, FileType):
        return _Core.CTetgenMesh_SaveTetgenMesh(self, Textile, OutputFilename, Parameters, bPeriodic, FileType)

    def __init__(self, *args):
        _Core.CTetgenMesh_swiginit(self, _Core.new_CTetgenMesh(*args))

# Register CTetgenMesh in _Core:
_Core.CTetgenMesh_swigregister(CTetgenMesh)

class CPeriodicBoundaries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CPeriodicBoundaries

    def CreatePeriodicBoundaries(self, Output, iDummyNodeNum, Textile, iBoundarConditions, bMatrixOnly):
        return _Core.CPeriodicBoundaries_CreatePeriodicBoundaries(self, Output, iDummyNodeNum, Textile, iBoundarConditions, bMatrixOnly)

    def SetDomainSize(self, Mesh):
        return _Core.CPeriodicBoundaries_SetDomainSize(self, Mesh)

    def SetFaceA(self, A1, A2):
        return _Core.CPeriodicBoundaries_SetFaceA(self, A1, A2)

    def SetFaceB(self, B1, B2):
        return _Core.CPeriodicBoundaries_SetFaceB(self, B1, B2)

    def SetFaceC(self, C1, C2):
        return _Core.CPeriodicBoundaries_SetFaceC(self, C1, C2)

    def SetFaceD(self, D1, D2):
        return _Core.CPeriodicBoundaries_SetFaceD(self, D1, D2)

    def SetEdges(self, Edge):
        return _Core.CPeriodicBoundaries_SetEdges(self, Edge)

    def SetVertex(self, Vertex):
        return _Core.CPeriodicBoundaries_SetVertex(self, Vertex)

    def SetOffset(self, Offset):
        return _Core.CPeriodicBoundaries_SetOffset(self, Offset)

    def OutputDummyNodeSets(self, Filename, iDummyNodeNum):
        return _Core.CPeriodicBoundaries_OutputDummyNodeSets(self, Filename, iDummyNodeNum)

    def OutputStep(self, Filename, iBoundaryConditions):
        return _Core.CPeriodicBoundaries_OutputStep(self, Filename, iBoundaryConditions)

    def __init__(self, *args):
        _Core.CPeriodicBoundaries_swiginit(self, _Core.new_CPeriodicBoundaries(*args))

# Register CPeriodicBoundaries in _Core:
_Core.CPeriodicBoundaries_swigregister(CPeriodicBoundaries)

class CShearedPeriodicBoundaries(CPeriodicBoundaries):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CShearedPeriodicBoundaries

    def SetDomainSize(self, Mesh):
        return _Core.CShearedPeriodicBoundaries_SetDomainSize(self, Mesh)

    def __init__(self, *args):
        _Core.CShearedPeriodicBoundaries_swiginit(self, _Core.new_CShearedPeriodicBoundaries(*args))

# Register CShearedPeriodicBoundaries in _Core:
_Core.CShearedPeriodicBoundaries_swigregister(CShearedPeriodicBoundaries)

class CStaggeredPeriodicBoundaries(CPeriodicBoundaries):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CStaggeredPeriodicBoundaries

    def SetFaceD(self, D1, D2):
        return _Core.CStaggeredPeriodicBoundaries_SetFaceD(self, D1, D2)

    def SetOffset(self, Offset):
        return _Core.CStaggeredPeriodicBoundaries_SetOffset(self, Offset)

    def __init__(self, *args):
        _Core.CStaggeredPeriodicBoundaries_swiginit(self, _Core.new_CStaggeredPeriodicBoundaries(*args))

# Register CStaggeredPeriodicBoundaries in _Core:
_Core.CStaggeredPeriodicBoundaries_swigregister(CStaggeredPeriodicBoundaries)

class CMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Copy(self):
        return _Core.CMaterial_Copy(self)

    def GetAbaqusCommands(self, *args):
        return _Core.CMaterial_GetAbaqusCommands(self, *args)

    def GetConstants(self):
        return _Core.CMaterial_GetConstants(self)

    def GetThermAbaqusCommands(self, *args):
        return _Core.CMaterial_GetThermAbaqusCommands(self, *args)
    __swig_destroy__ = _Core.delete_CMaterial

# Register CMaterial in _Core:
_Core.CMaterial_swigregister(CMaterial)

class CUMAT(CMaterial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Copy(self):
        return _Core.CUMAT_Copy(self)

    def GetAbaqusCommands(self, *args):
        return _Core.CUMAT_GetAbaqusCommands(self, *args)

    def GetThermAbaqusCommands(self, *args):
        return _Core.CUMAT_GetThermAbaqusCommands(self, *args)

    def SetConstants(self, Constants):
        return _Core.CUMAT_SetConstants(self, Constants)

    def GetConstants(self):
        return _Core.CUMAT_GetConstants(self)

    def __init__(self, *args):
        _Core.CUMAT_swiginit(self, _Core.new_CUMAT(*args))
    __swig_destroy__ = _Core.delete_CUMAT

# Register CUMAT in _Core:
_Core.CUMAT_swigregister(CUMAT)

class CTextileMaterials(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CTextileMaterials

    def SetupMaterials(self, Textile):
        return _Core.CTextileMaterials_SetupMaterials(self, Textile)

    def AssignMaterial(self, *args):
        return _Core.CTextileMaterials_AssignMaterial(self, *args)

    def CompareMaterialConstants(self, MatConstants, ThermConstants, Constants):
        return _Core.CTextileMaterials_CompareMaterialConstants(self, MatConstants, ThermConstants, Constants)

    def AddMaterial(self, Name, Constants):
        return _Core.CTextileMaterials_AddMaterial(self, Name, Constants)

    def CheckYarnConstants(self, Constants):
        return _Core.CTextileMaterials_CheckYarnConstants(self, Constants)

    def OutputMaterials(self, Output, iNumYarns, bMatrixOnly):
        return _Core.CTextileMaterials_OutputMaterials(self, Output, iNumYarns, bMatrixOnly)

    def GetMaterials(self):
        return _Core.CTextileMaterials_GetMaterials(self)

    def GetMaterialAssignements(self):
        return _Core.CTextileMaterials_GetMaterialAssignements(self)

    def __init__(self, *args):
        _Core.CTextileMaterials_swiginit(self, _Core.new_CTextileMaterials(*args))

# Register CTextileMaterials in _Core:
_Core.CTextileMaterials_swigregister(CTextileMaterials)

class CShellElementExport(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CShellElementExport

    def SaveShellElementToABAQUS(self, Filename, Textile):
        return _Core.CShellElementExport_SaveShellElementToABAQUS(self, Filename, Textile)

    def GetMesh(self):
        return _Core.CShellElementExport_GetMesh(self)

    def __init__(self, *args):
        _Core.CShellElementExport_swiginit(self, _Core.new_CShellElementExport(*args))

# Register CShellElementExport in _Core:
_Core.CShellElementExport_swigregister(CShellElementExport)

class CSurfaceMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CSurfaceMesh

    def SaveSurfaceMesh(self, Textile, bSaveYarns=True, bSaveDomain=False, bTrimToDomain=True):
        return _Core.CSurfaceMesh_SaveSurfaceMesh(self, Textile, bSaveYarns, bSaveDomain, bTrimToDomain)

    def SaveToSTL(self, Filename, bBinary):
        return _Core.CSurfaceMesh_SaveToSTL(self, Filename, bBinary)

    def SaveToVTK(self, Filename):
        return _Core.CSurfaceMesh_SaveToVTK(self, Filename)

    def SaveToSCIRun(self, Filename):
        return _Core.CSurfaceMesh_SaveToSCIRun(self, Filename)

    def __init__(self, *args):
        _Core.CSurfaceMesh_swiginit(self, _Core.new_CSurfaceMesh(*args))

# Register CSurfaceMesh in _Core:
_Core.CSurfaceMesh_swigregister(CSurfaceMesh)

class CPatternDraft(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _Core.delete_CPatternDraft

    def AddRow(self, Row):
        return _Core.CPatternDraft_AddRow(self, Row)

    def ClearWeavePattern(self):
        return _Core.CPatternDraft_ClearWeavePattern(self)

    def GetNumWarps(self):
        return _Core.CPatternDraft_GetNumWarps(self)

    def GetNumWefts(self):
        return _Core.CPatternDraft_GetNumWefts(self)

    def GetNumHeddles(self):
        return _Core.CPatternDraft_GetNumHeddles(self)

    def Output(self, Filename):
        return _Core.CPatternDraft_Output(self, Filename)

    def CreatePatternDraft(self):
        return _Core.CPatternDraft_CreatePatternDraft(self)

    def GetWeavePattern(self):
        return _Core.CPatternDraft_GetWeavePattern(self)

    def GetHeddleDraft(self):
        return _Core.CPatternDraft_GetHeddleDraft(self)

    def GetChainDraft(self):
        return _Core.CPatternDraft_GetChainDraft(self)

    def __init__(self, *args):
        _Core.CPatternDraft_swiginit(self, _Core.new_CPatternDraft(*args))

# Register CPatternDraft in _Core:
_Core.CPatternDraft_swigregister(CPatternDraft)


def GetTextile(*args):
    return _Core.GetTextile(*args)

def AddTextile(*args):
    return _Core.AddTextile(*args)

def DeleteTextile(TextileName):
    return _Core.DeleteTextile(TextileName)

def SaveToXML(*args):
    return _Core.SaveToXML(*args)

def ReadFromXML(FileName):
    return _Core.ReadFromXML(FileName)

def DeleteTextiles():
    return _Core.DeleteTextiles()

def GetTextiles():
    return _Core.GetTextiles()


